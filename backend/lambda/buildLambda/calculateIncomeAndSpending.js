"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateIncomeAndSpending = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const Entities_1 = require("./queries/Entities");
const Encryption_1 = require("./queries/Encryption");
const Item_1 = require("./mappers/Item");
const Transactions_1 = require("./mappers/Transactions");
const Summaries_1 = require("./queries/Summaries");
const client = new client_dynamodb_1.DynamoDBClient({ region: 'ca-central-1' });
function aggregateSpendingByCategory(transactions) {
    const MS_IN_A_DAY = 1000 * 60 * 60 * 24;
    // Initialize accumulators
    const dailySpendingMap = {};
    const weeklySpending = {};
    const monthlySpending = {};
    // Step 1: Sum amounts per category by day
    for (const transaction of transactions) {
        if (transaction.amount && transaction.date) {
            const amount = parseFloat(transaction.amount);
            const date = new Date(transaction.date);
            const dateKey = date.toISOString().split('T')[0]; // Format date as YYYY-MM-DD
            // Only consider transactions that are spending, not income or transfers
            const category = transaction.personal_finance_category?.primary;
            if (category) {
                // Initialize daily spending map for the date if not present
                if (!dailySpendingMap[dateKey]) {
                    dailySpendingMap[dateKey] = {};
                }
                // Aggregate amounts for each category in daily, weekly, and monthly maps
                dailySpendingMap[dateKey][category] = (dailySpendingMap[dateKey][category] || 0) + Math.abs(amount);
                weeklySpending[category] = (weeklySpending[category] || 0) + Math.abs(amount);
                monthlySpending[category] = (monthlySpending[category] || 0) + Math.abs(amount);
            }
        }
    }
    // Convert daily spending map to an array of DailySpendingSummary
    const dailySpendingSummaries = Object.entries(dailySpendingMap).map(([date, spending]) => ({
        date,
        spending,
    }));
    // Step 2: Calculate date range for averages
    const transactionDates = Object.keys(dailySpendingMap).map((date) => new Date(date));
    if (transactionDates.length === 0) {
        throw new Error('No valid transactions found to aggregate.');
    }
    const minDate = new Date(Math.min(...transactionDates.map((date) => date.getTime())));
    const maxDate = new Date(Math.max(...transactionDates.map((date) => date.getTime())));
    const durationInDays = (maxDate.getTime() - minDate.getTime()) / MS_IN_A_DAY;
    // Step 3: Calculate weekly and monthly averages
    for (const category of Object.keys(weeklySpending)) {
        if (weeklySpending[category])
            weeklySpending[category] /= durationInDays / 7;
        if (monthlySpending[category])
            monthlySpending[category] /= durationInDays / 30;
    }
    return {
        daily_spending: dailySpendingSummaries,
        weekly_spending: weeklySpending,
        monthly_spending: monthlySpending,
    };
}
function groupTransactionsByMonth(transactions) {
    const monthlyAggregates = {};
    const transactionsByMonth = transactions.reduce((acc, transaction) => {
        if (transaction.date) {
            const date = new Date(transaction.date);
            const monthYear = `${date.getFullYear()}-${date.getMonth() + 1}`;
            if (!acc[monthYear]) {
                acc[monthYear] = [];
            }
            acc[monthYear].push(transaction);
        }
        return acc;
    }, {});
    for (const [monthYear, monthTransactions] of Object.entries(transactionsByMonth)) {
        monthlyAggregates[monthYear] = aggregateSpendingByCategory(monthTransactions);
    }
    return monthlyAggregates;
}
function getEarliestFirstOfMonthWithin90Days(createdAt) {
    const date90DaysAgo = new Date(createdAt);
    date90DaysAgo.setDate(date90DaysAgo.getDate() - 90);
    // Get the first day of the current month of `createdAt`
    const firstOfCurrentMonth = new Date(createdAt.getFullYear(), createdAt.getMonth(), 1);
    // Check if the first day of the current month is within 90 days
    if (firstOfCurrentMonth >= date90DaysAgo) {
        return firstOfCurrentMonth;
    }
    // If not, return the first day of the earliest month within the 90-day range
    return new Date(date90DaysAgo.getFullYear(), date90DaysAgo.getMonth(), 1);
}
const calculateIncomeAndSpending = async () => {
    // TODO: Add logic to handle last calculated complete month and start from then
    const items = (await (0, Encryption_1.decryptItemsInBatches)((await client.send((0, Entities_1.GetItems)()))?.Items ?? [])).map(Item_1.mapDdbResponseToItem);
    /** TODO: Just add created at to the item? */
    const encryptedUserItemRecord = await Promise.all(items.map(async (el) => await client.send((0, Entities_1.GetUser)(el.sk || ''))));
    const decryptedUserItemRecord = (await (0, Encryption_1.decryptItemsInBatches)(encryptedUserItemRecord)).map(Item_1.mapDdbResponseToItem);
    /** Go through users and aggregate transactions */
    await processUsersInBatches(decryptedUserItemRecord);
};
exports.calculateIncomeAndSpending = calculateIncomeAndSpending;
function chunkArray(array, chunkSize) {
    const chunks = [];
    for (let i = 0; i < array.length; i += chunkSize) {
        chunks.push(array.slice(i, i + chunkSize));
    }
    return chunks;
}
async function processUsersInBatches(decryptedUserItemRecord) {
    const userBatches = chunkArray(decryptedUserItemRecord, 100);
    const now = new Date(); // Get the current date and time
    for (const batch of userBatches) {
        await Promise.all(batch.map(async (item) => {
            const startDay = getEarliestFirstOfMonthWithin90Days(new Date(item?.created_at ?? 0));
            const encryptedTransactions = await client.send((0, Entities_1.GetEntities)({
                pk: item.pk ?? '',
                dateRange: {
                    startDay: {
                        day: startDay.getDate() + 1,
                        month: startDay.getMonth() + 1,
                        year: startDay.getFullYear(),
                    },
                    endDay: {
                        day: now.getDate() + 1,
                        month: now.getMonth() + 1,
                        year: now.getFullYear(),
                    },
                    hasNoTimeConstraint: false,
                },
                username: '',
                id: '',
                entityName: 'TRANSACTION',
            }));
            const decryptedTransactions = (await (0, Encryption_1.decryptItemsInBatches)(encryptedTransactions.Items ?? [])).map(Transactions_1.mapDynamoDBToTransaction);
            const aggregates = groupTransactionsByMonth(decryptedTransactions);
            await (0, Summaries_1.uploadSpendingSummaries)(item.pk ?? '', Object.entries(aggregates).flatMap((el) => el[1].daily_spending), aggregates);
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,