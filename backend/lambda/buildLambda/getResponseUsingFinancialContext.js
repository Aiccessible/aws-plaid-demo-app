"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResponseUsingFinancialContext = void 0;
const API_1 = require("./API");
const gpt_1 = require("./gpt");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const Entities_1 = require("./queries/Entities");
const Security_1 = require("./mappers/Security");
const Accounts_1 = require("./mappers/Accounts");
const Transactions_1 = require("./mappers/Transactions");
const CacheEntity_1 = require("./mappers/CacheEntity");
const Encryption_1 = require("./queries/Encryption");
const client = new client_dynamodb_1.DynamoDBClient({ region: 'ca-central-1' });
const dateSupportedFiltering = ['TRANSACTION'];
const mapOfInformationOptionToKey = {
    BANKACCOUNTS: 'ACCOUNT',
    INVESTMENTS: 'SECURITY',
    TRANSACTIONS: 'TRANSACTION',
};
const mapOfCacheTypeToExpiry = {
    [API_1.CacheType.InvestmentAnalysis]: 60 * 60 * 1000,
    [API_1.CacheType.PortfolioAnalysis]: 60 * 60 * 1000 * 24,
    [API_1.CacheType.StockAnalysis]: 60 * 60 * 1000 * 24,
    [API_1.CacheType.StockNews]: 60 * 60 * 1000,
};
const getResponseUsingFinancialContext = async (event, context) => {
    console.info('Get response for', event);
    let neededInfo = { optionsForInformation: [] };
    let dateRangeResponse;
    if (event.arguments.chat.shouldRagFetch &&
        !(event.arguments.chat.currentDateRange && event.arguments.chat.highLevelCategory)) {
        const informationNeeded = (0, gpt_1.getNeededInformationFromModel)(event.arguments.chat.prompt || '');
        const dateRange = (0, gpt_1.getDateRangeFromModel)(event.arguments.chat.prompt || '');
        await Promise.all([informationNeeded, dateRange]);
        neededInfo = JSON.parse((await informationNeeded).content || '');
        dateRangeResponse = JSON.parse((await dateRange).content || '');
    }
    if (event.arguments.chat.cacheIdentifiers) {
        const cacheChecks = await Promise.all(event.arguments.chat.cacheIdentifiers.map((id) => {
            return client.send((0, Entities_1.GetCacheEntity)({
                id: id.key || '',
                expiresAt: mapOfCacheTypeToExpiry[id.cacheType] + Date.now(),
            }));
        }));
        const itemHits = cacheChecks.flatMap((el) => el.Items ?? []);
        if (itemHits.length) {
            return {
                response: itemHits.map(CacheEntity_1.mapDdbResponseToCacheEntity).join('') || '',
                __typename: 'ChatResponse',
            };
        }
    }
    if (event.arguments.chat.chatFocus === API_1.ChatFocus.Investment &&
        !neededInfo.optionsForInformation.find((el) => el === gpt_1.InformationOptions.INVESTMENTS)) {
        neededInfo.optionsForInformation.push('INVESTMENTS');
    }
    else if (event.arguments.chat.chatFocus === API_1.ChatFocus.Transaction &&
        !neededInfo.optionsForInformation.find((el) => el === gpt_1.InformationOptions.TRANSACTIONS)) {
        neededInfo.optionsForInformation.push('TRANSACTIONS');
    }
    console.info('Context: ', context);
    console.info('Needed info ', neededInfo);
    console.info('Date range: ', dateRangeResponse);
    const user = event.identity?.username;
    let tupleOfTypeToElements;
    tupleOfTypeToElements = await Promise.all(neededInfo.optionsForInformation.map(async (option) => {
        const entityName = mapOfInformationOptionToKey[option].toString();
        return [
            option,
            await client.send((0, Entities_1.GetEntities)({
                username: user || '',
                id: event.arguments.chat.accountId || '',
                dateRange: entityName in dateSupportedFiltering ? dateRangeResponse : undefined,
                entityName: entityName,
                customDateRange: event.arguments.chat?.currentDateRange?.map((el) => el ? parseInt(el) : undefined) ?? undefined,
                highLevelCategory: event.arguments.chat.highLevelCategory ?? undefined,
            })),
        ];
    }));
    /** Get the contextual data */
    const ddbResponses = await Promise.all(tupleOfTypeToElements.map(async (tuple) => {
        const decryptedItems = await (0, Encryption_1.decryptItemsInBatches)(tuple[1]?.Items ?? []);
        if (tuple[0].toString() === 'INVESTMENTS') {
            const mappedData = await (0, Security_1.mapSecuritiesToJoinedData)(decryptedItems);
            return '\nInvestments:\n' + (0, Security_1.mapJointDataToChatInput)(mappedData);
        }
        else if (tuple[0].toString() === 'TRANSACTIONS') {
            return ('\nTranasactions:\n' +
                decryptedItems.map(Transactions_1.mapDynamoDBToTransaction).map(Transactions_1.mapTransactionToChatInput).join(''));
        }
        else if (tuple[0].toString() === 'BANKACCOUNTS') {
            return '\nAccounts:\n' + decryptedItems.map(Accounts_1.mapDynamoDBToAccount).map(Accounts_1.mapAccountToChatInput).join('');
        }
        else {
            throw new Error('UNRECOGNIZED OPTION ' + tuple[0]);
        }
    }));
    const ragData = ddbResponses.join('');
    console.info('FINAL RAG DATA: ', ragData);
    const { prompt } = event.arguments.chat;
    const response = await (0, gpt_1.completeChatFromPrompt)(prompt + ' Use this data for your answer: ' + ragData || '', event.arguments.chat.chatFocus, user, event.arguments.chat.requiresLiveData ?? false, event.arguments.chat.chatType ?? API_1.ChatType.Regular);
    event.arguments.chat.cacheIdentifiers?.map((id) => {
        client.send((0, Entities_1.PutCacheEntity)({
            id: id.key || '',
            expiresAt: mapOfCacheTypeToExpiry[id.cacheType] + Date.now(),
        }, {}));
    });
    return {
        response: response || '',
        __typename: 'ChatResponse',
    };
};
exports.getResponseUsingFinancialContext = getResponseUsingFinancialContext;
//# sourceMappingURL=data:application/json;base64,