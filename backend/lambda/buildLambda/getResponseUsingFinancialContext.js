"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCacheKey = exports.getResponseUsingFinancialContext = void 0;
const API_1 = require("./API");
const gpt_1 = require("./gpt");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const Entities_1 = require("./queries/Entities");
const Security_1 = require("./mappers/Security");
const Accounts_1 = require("./mappers/Accounts");
const Transactions_1 = require("./mappers/Transactions");
const CacheEntity_1 = require("./mappers/CacheEntity");
const Encryption_1 = require("./queries/Encryption");
const MonthlySummary_1 = require("./mappers/MonthlySummary");
const client = new client_dynamodb_1.DynamoDBClient({ region: 'ca-central-1' });
const dateSupportedFiltering = ['TRANSACTION', 'MONTHLYSUMMARY'];
const mapOfInformationOptionToKey = {
    ACCOUNTS: 'ACCOUNT',
    INVESTMENTS: 'SECURITY',
    TRANSACTIONS: 'TRANSACTION',
    MONTHLYSUMMARY: 'MONTHLYSUMMARY',
};
const mapOfCacheTypeToExpiry = {
    [API_1.CacheType.InvestmentAnalysis]: 60 * 60 * 1000 * 4,
    [API_1.CacheType.PortfolioAnalysis]: 60 * 60 * 1000 * 24,
    [API_1.CacheType.StockAnalysis]: 60 * 60 * 1000 * 24,
    [API_1.CacheType.StockNews]: 60 * 60 * 1000 * 4,
    [API_1.CacheType.TransactionRecommendation]: 60 * 60 * 1000 * 24 * 5,
    [API_1.CacheType.GeneralRecommendation]: 60 * 60 * 1000 * 24,
    [API_1.CacheType.BudgetRecommendation]: 60 * 60 * 1000 * 24 * 20,
};
const getResponseUsingFinancialContext = async (event, context) => {
    const user = event.identity?.username;
    console.info('Get response for', event);
    const maxAccounts = event.arguments.chat.accountIds?.slice(0, 10) ?? [];
    let neededInfo = { optionsForInformation: [] };
    let dateRangeResponse;
    if (!event.arguments.chat.doNotUseAdvancedRag &&
        !(event.arguments.chat.currentDateRange && event.arguments.chat.highLevelCategory) &&
        !event.arguments.chat.doNotUseAdvancedRag) {
        const informationNeeded = (0, gpt_1.getNeededInformationFromModel)(event.arguments.chat.prompt || '');
        const dateRange = (0, gpt_1.getDateRangeFromModel)(event.arguments.chat.prompt || '');
        await Promise.all([informationNeeded, dateRange]);
        neededInfo = JSON.parse((await informationNeeded).content || '');
        dateRangeResponse = JSON.parse((await dateRange).content || '');
    }
    if (event.arguments.chat.cacheIdentifiers) {
        const cacheChecks = await Promise.all(event.arguments.chat.cacheIdentifiers.map((id) => {
            let cacheKey = (0, exports.getCacheKey)(user, id);
            return client.send((0, Entities_1.GetCacheEntity)({
                id: cacheKey || '',
                sk: id.cacheType?.toString() ?? '',
                expire_at: Date.now(),
            }));
        }));
        const itemHits = cacheChecks.flatMap((el) => el.Items ?? []);
        if (itemHits.length) {
            return {
                response: itemHits
                    .map(CacheEntity_1.mapDdbResponseToCacheEntity)
                    ?.map((el) => el.response)
                    .join('') || '',
                __typename: 'ChatResponse',
            };
        }
    }
    if (event.arguments.chat.chatFocus === API_1.ChatFocus.Investment &&
        !neededInfo.optionsForInformation.find((el) => el === gpt_1.InformationOptions.INVESTMENTS)) {
        neededInfo.optionsForInformation.push('INVESTMENTS');
    }
    else if ((event.arguments.chat.chatFocus === API_1.ChatFocus.Transaction ||
        event.arguments.chat.chatType === API_1.ChatType.TransactionRecommendation) &&
        !neededInfo.optionsForInformation.find((el) => el === gpt_1.InformationOptions.TRANSACTIONS)) {
        neededInfo.optionsForInformation.push('TRANSACTIONS');
    }
    if (event.arguments.chat.chatType === API_1.ChatType.GeneralRecommendation) {
        neededInfo.optionsForInformation = ['INVESTMENTS', 'ACCOUNTS', 'MONTHLYSUMMARY'];
    }
    if (event.arguments.chat.chatType === API_1.ChatType.RecommendBudget) {
        neededInfo.optionsForInformation = ['ACCOUNTS', 'MONTHLYSUMMARY'];
    }
    if (neededInfo.optionsForInformation?.length === 0) {
        neededInfo.optionsForInformation = ['ACCOUNTS', 'MONTHLYSUMMARY'];
    }
    console.info('Context: ', context);
    console.info('Needed info ', neededInfo);
    console.info('Date range: ', dateRangeResponse);
    let tupleOfTypeToElements;
    tupleOfTypeToElements = (await Promise.all(neededInfo.optionsForInformation.map(async (option) => {
        const entityName = mapOfInformationOptionToKey[option].toString();
        return await Promise.all(entityName !== 'MONTHLYSUMMARY'
            ? maxAccounts?.map(async (accountId) => {
                return [
                    option,
                    await client.send((0, Entities_1.GetEntities)({
                        username: user || '',
                        id: accountId || '',
                        dateRange: dateSupportedFiltering.find((el) => el === entityName)
                            ? dateRangeResponse
                            : undefined,
                        entityName: entityName,
                        customDateRange: dateSupportedFiltering.find((el) => el === entityName)
                            ? event.arguments.chat?.currentDateRange?.map((el) => el ? parseInt(el) : undefined) ?? undefined
                            : undefined,
                        highLevelCategory: event.arguments.chat.highLevelCategory ?? undefined,
                    })),
                ];
            }) ?? [option, undefined]
            : [
                [
                    option,
                    await client.send((0, Entities_1.GetEntities)({
                        username: user || '',
                        id: 'v0',
                        dateRange: dateSupportedFiltering.find((el) => el === entityName)
                            ? dateRangeResponse
                            : undefined,
                        entityName: entityName,
                        customDateRange: undefined,
                        highLevelCategory: event.arguments.chat.highLevelCategory ?? undefined,
                    })),
                ],
            ]);
    }))).flatMap((el) => [...el]);
    /** Get the contextual data */
    const ddbResponses = await Promise.all(tupleOfTypeToElements.map(async (tuple) => {
        await tuple[0];
        const awaitedTuple = tuple;
        const decryptedItems = await (0, Encryption_1.decryptItemsInBatches)(awaitedTuple[1]?.Items ?? []);
        if (awaitedTuple[0].toString() === 'INVESTMENTS') {
            const mappedData = await (0, Security_1.mapSecuritiesToJoinedData)(decryptedItems);
            return '\nInvestments:\n' + (0, Security_1.mapJointDataToChatInput)(mappedData);
        }
        else if (awaitedTuple[0].toString() === 'TRANSACTIONS') {
            return ('\nTranasactions:\n' +
                decryptedItems.map(Transactions_1.mapDynamoDBToTransaction).map(Transactions_1.mapTransactionToChatInput).join(''));
        }
        else if (awaitedTuple[0].toString() === 'ACCOUNTS') {
            return '\nAccounts:\n' + decryptedItems.map(Accounts_1.mapDynamoDBToAccount).map(Accounts_1.mapAccountToChatInput).join('');
        }
        else if (awaitedTuple[0].toString() === 'MONTHLYSUMMARY') {
            return ('\nMonthly Spending:\n' +
                decryptedItems.map(MonthlySummary_1.mapDynamoDBToMonthlySummary).map(MonthlySummary_1.mapSpendingSummaryToChatInput).join(''));
        }
        else {
            throw new Error('UNRECOGNIZED OPTION ' + awaitedTuple[0]);
        }
    }));
    const ragData = ddbResponses.join('');
    console.info('FINAL RAG DATA: ', ragData);
    const { prompt } = event.arguments.chat;
    const response = await (0, gpt_1.completeChatFromPrompt)(prompt + ' Use this data for your answer: ' + ragData || '', event.arguments.chat.chatFocus, user, event.arguments.chat.requiresLiveData ?? false, event.arguments.chat.chatType ?? API_1.ChatType.Regular, event.arguments.chat.chatHistory ?? []);
    event.arguments.chat.cacheIdentifiers?.map((id) => {
        let cacheKey = (0, exports.getCacheKey)(user, id);
        client.send((0, Entities_1.PutCacheEntity)({
            id: cacheKey || '',
            expire_at: mapOfCacheTypeToExpiry[id.cacheType] + Date.now(),
            sk: id.cacheType?.toString() ?? '',
        }, { response: { S: response } }));
    });
    return {
        response: response || '',
        __typename: 'ChatResponse',
    };
};
exports.getResponseUsingFinancialContext = getResponseUsingFinancialContext;
const getCacheKey = (user, id) => {
    let cacheKey = id.key;
    if (id.cacheType === API_1.CacheType.InvestmentAnalysis ||
        id.cacheType === API_1.CacheType.PortfolioAnalysis ||
        id.cacheType === API_1.CacheType.TransactionRecommendation ||
        id.cacheType === API_1.CacheType.GeneralRecommendation) {
        cacheKey = user + id.key?.slice(0, 100);
    }
    return cacheKey;
};
exports.getCacheKey = getCacheKey;
//# sourceMappingURL=data:application/json;base64,