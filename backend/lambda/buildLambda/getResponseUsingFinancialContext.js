"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResponseUsingFinancialContext = void 0;
const gpt_1 = require("./gpt");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const Entities_1 = require("./queries/Entities");
const Security_1 = require("./mappers/Security");
const Accounts_1 = require("./mappers/Accounts");
const Transactions_1 = require("./mappers/Transactions");
const client = new client_dynamodb_1.DynamoDBClient({ region: 'ca-central-1' });
const dateSupportedFiltering = ['TRANSACTION'];
const mapOfInformationOptionToKey = {
    BANKACCOUNTS: 'ACCOUNT',
    INVESTMENTS: 'SECURITY',
    TRANSACTIONS: 'TRANSACTION',
};
const getResponseUsingFinancialContext = async (event, context) => {
    console.info('Get response for', event);
    const informationNeeded = (0, gpt_1.getNeededInformationFromModel)(event.arguments.chat.prompt || '');
    const dateRange = (0, gpt_1.getDateRangeFromModel)(event.arguments.chat.prompt || '');
    await Promise.all([informationNeeded, dateRange]);
    const neededInfo = JSON.parse((await informationNeeded).content || '');
    const dateRangeResponse = JSON.parse((await dateRange).content || '');
    console.info('Context: ', context);
    console.info('Needed info ', neededInfo);
    console.info('Date range: ', dateRangeResponse);
    const user = event.identity?.username;
    let tupleOfTypeToElements;
    tupleOfTypeToElements = await Promise.all(neededInfo.optionsForInformation.map(async (option) => {
        const entityName = mapOfInformationOptionToKey[option].toString();
        return [
            option,
            await client.send((0, Entities_1.GetEntities)({
                username: user || '',
                id: event.arguments.chat.accountId || '',
                dateRange: entityName in dateSupportedFiltering ? dateRangeResponse : undefined,
                entityName: entityName,
            })),
        ];
    }));
    const ddbResponses = tupleOfTypeToElements.map((tuple) => {
        if (tuple[0].toString() === 'INVESTMENTS') {
            const mappedData = (0, Security_1.mapSecuritiesToJoinedData)(tuple[1].Items ?? []);
            return '\nInvestments:\n' + (0, Security_1.mapJointDataToChatInput)(mappedData);
        }
        else if (tuple[0].toString() === 'TRANSACTIONS') {
            return ('\nTranasactions:\n' +
                (tuple[1].Items ?? []).map(Transactions_1.mapDynamoDBToTransaction).map(Transactions_1.mapTransactionToChatInput).join(''));
        }
        else if (tuple[0].toString() === 'BANKACCOUNTS') {
            return ('\nAccounts:\n' + (tuple[1].Items ?? []).map(Accounts_1.mapDynamoDBToAccount).map(Accounts_1.mapAccountToChatInput).join(''));
        }
        else {
            throw new Error('UNRECOGNIZED OPTION ' + tuple[0]);
        }
    });
    const ragData = ddbResponses.join('');
    console.info('FINAL RAG DATA: ', ragData);
    const { prompt } = event.arguments.chat;
    const response = await (0, gpt_1.completeChatFromPrompt)(prompt + ' Use this data for your answer: ' + ragData || '', event.arguments.chat.chatFocus);
    return {
        response: response.content || '',
        __typename: 'ChatResponse',
    };
};
exports.getResponseUsingFinancialContext = getResponseUsingFinancialContext;
//# sourceMappingURL=data:application/json;base64,