"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResponseUsingFinancialContext = void 0;
const API_1 = require("./API");
const gpt_1 = require("./gpt");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const Entities_1 = require("./queries/Entities");
const Security_1 = require("./mappers/Security");
const Accounts_1 = require("./mappers/Accounts");
const Transactions_1 = require("./mappers/Transactions");
const CacheEntity_1 = require("./mappers/CacheEntity");
const client = new client_dynamodb_1.DynamoDBClient({ region: 'ca-central-1' });
const dateSupportedFiltering = ['TRANSACTION'];
const mapOfInformationOptionToKey = {
    BANKACCOUNTS: 'ACCOUNT',
    INVESTMENTS: 'SECURITY',
    TRANSACTIONS: 'TRANSACTION',
};
const mapOfCacheTypeToExpiry = {
    [API_1.CacheType.InvestmentAnalysis]: 60 * 60 * 1000,
    [API_1.CacheType.PortfolioAnalysis]: 60 * 60 * 1000 * 24,
    [API_1.CacheType.StockAnalysis]: 60 * 60 * 1000 * 24,
    [API_1.CacheType.StockNews]: 60 * 60 * 1000,
};
const getResponseUsingFinancialContext = async (event, context) => {
    console.info('Get response for', event);
    let neededInfo = { optionsForInformation: [] };
    let dateRangeResponse;
    if (event.arguments.chat.shouldRagFetch) {
        const informationNeeded = (0, gpt_1.getNeededInformationFromModel)(event.arguments.chat.prompt || '');
        const dateRange = (0, gpt_1.getDateRangeFromModel)(event.arguments.chat.prompt || '');
        await Promise.all([informationNeeded, dateRange]);
        neededInfo = JSON.parse((await informationNeeded).content || '');
        dateRangeResponse = JSON.parse((await dateRange).content || '');
    }
    if (event.arguments.chat.cacheIdentifiers) {
        const cacheChecks = await Promise.all(event.arguments.chat.cacheIdentifiers.map((id) => {
            return client.send((0, Entities_1.GetCacheEntity)({
                id: id.key || '',
                expiresAt: mapOfCacheTypeToExpiry[id.cacheType] + Date.now(),
            }));
        }));
        const itemHits = cacheChecks.flatMap((el) => el.Items ?? []);
        if (itemHits.length) {
            return {
                response: itemHits.map(CacheEntity_1.mapDdbResponseToCacheEntity).join('') || '',
                __typename: 'ChatResponse',
            };
        }
    }
    if (event.arguments.chat.chatFocus === API_1.ChatFocus.Investment &&
        !neededInfo.optionsForInformation.find((el) => el === gpt_1.InformationOptions.INVESTMENTS)) {
        neededInfo.optionsForInformation.push('INVESTMENTS');
    }
    console.info('Context: ', context);
    console.info('Needed info ', neededInfo);
    console.info('Date range: ', dateRangeResponse);
    const user = event.identity?.username;
    let tupleOfTypeToElements;
    tupleOfTypeToElements = await Promise.all(neededInfo.optionsForInformation.map(async (option) => {
        const entityName = mapOfInformationOptionToKey[option].toString();
        return [
            option,
            await client.send((0, Entities_1.GetEntities)({
                username: user || '',
                id: event.arguments.chat.accountId || '',
                dateRange: entityName in dateSupportedFiltering ? dateRangeResponse : undefined,
                entityName: entityName,
            })),
        ];
    }));
    /** Get the contextual data */
    const ddbResponses = tupleOfTypeToElements.map((tuple) => {
        if (tuple[0].toString() === 'INVESTMENTS') {
            const mappedData = (0, Security_1.mapSecuritiesToJoinedData)(tuple[1].Items ?? []);
            return '\nInvestments:\n' + (0, Security_1.mapJointDataToChatInput)(mappedData);
        }
        else if (tuple[0].toString() === 'TRANSACTIONS') {
            return ('\nTranasactions:\n' +
                (tuple[1].Items ?? []).map(Transactions_1.mapDynamoDBToTransaction).map(Transactions_1.mapTransactionToChatInput).join(''));
        }
        else if (tuple[0].toString() === 'BANKACCOUNTS') {
            return ('\nAccounts:\n' + (tuple[1].Items ?? []).map(Accounts_1.mapDynamoDBToAccount).map(Accounts_1.mapAccountToChatInput).join(''));
        }
        else {
            throw new Error('UNRECOGNIZED OPTION ' + tuple[0]);
        }
    });
    const ragData = ddbResponses.join('');
    console.info('FINAL RAG DATA: ', ragData);
    const { prompt } = event.arguments.chat;
    const response = await (0, gpt_1.completeChatFromPrompt)(prompt + ' Use this data for your answer: ' + ragData || '', event.arguments.chat.chatFocus, user, event.arguments.chat.requiresLiveData ?? false, event.arguments.chat.chatType ?? API_1.ChatType.Regular);
    event.arguments.chat.cacheIdentifiers?.map((id) => {
        client.send((0, Entities_1.PutCacheEntity)({
            id: id.key || '',
            expiresAt: mapOfCacheTypeToExpiry[id.cacheType] + Date.now(),
        }, {}));
    });
    return {
        response: response || '',
        __typename: 'ChatResponse',
    };
};
exports.getResponseUsingFinancialContext = getResponseUsingFinancialContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UmVzcG9uc2VVc2luZ0ZpbmFuY2lhbENvbnRleHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2V0UmVzcG9uc2VVc2luZ0ZpbmFuY2lhbENvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsK0JBQStFO0FBQy9FLCtCQU9jO0FBQ2QsOERBQTJGO0FBQzNGLGlEQUFnRjtBQUNoRixpREFBdUY7QUFDdkYsaURBQWdGO0FBQ2hGLHlEQUE0RjtBQUM1Rix1REFBbUU7QUFDbkUsTUFBTSxNQUFNLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUE7QUFFN0QsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBRTlDLE1BQU0sMkJBQTJCLEdBQStCO0lBQzVELFlBQVksRUFBRSxTQUFTO0lBQ3ZCLFdBQVcsRUFBRSxVQUFVO0lBQ3ZCLFlBQVksRUFBRSxhQUFhO0NBQzlCLENBQUE7QUFFRCxNQUFNLHNCQUFzQixHQUE4QjtJQUN0RCxDQUFDLGVBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSTtJQUM5QyxDQUFDLGVBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxHQUFHLEVBQUU7SUFDbEQsQ0FBQyxlQUFTLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLEdBQUcsRUFBRTtJQUM5QyxDQUFDLGVBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUk7Q0FDeEMsQ0FBQTtBQUVNLE1BQU0sZ0NBQWdDLEdBQThDLEtBQUssRUFDNUYsS0FBZ0QsRUFDaEQsT0FBZ0IsRUFDbEIsRUFBRTtJQUNBLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDdkMsSUFBSSxV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YyxFQUNWO1lBQ0ksRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRTtZQUNoQixTQUFTLEVBQUUsc0JBQXNCLENBQUMsRUFBRSxDQUFDLFNBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUU7U0FDaEUsRUFDRCxFQUFFLENBQ0wsQ0FDSixDQUFBO0lBQ0wsQ0FBQyxDQUFDLENBQUE7SUFDRixPQUFPO1FBQ0gsUUFBUSxFQUFFLFFBQVEsSUFBSSxFQUFFO1FBQ3hCLFVBQVUsRUFBRSxjQUFjO0tBQzdCLENBQUE7QUFDTCxDQUFDLENBQUE7QUExR1ksUUFBQSxnQ0FBZ0Msb0NBMEc1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFN5bmNJZGVudGl0eUNvZ25pdG8sIEFwcFN5bmNSZXNvbHZlckV2ZW50LCBBcHBTeW5jUmVzb2x2ZXJIYW5kbGVyLCBDb250ZXh0IH0gZnJvbSAnYXdzLWxhbWJkYSdcbmltcG9ydCB7IENoYXRGb2N1cywgQ2hhdFF1ZXJ5LCBDaGF0UmVzcG9uc2UsIENoYXRUeXBlLCBDYWNoZVR5cGUgfSBmcm9tICcuL0FQSSdcbmltcG9ydCB7XG4gICAgRGF0YVJhbmdlUmVzcG9uc2UsXG4gICAgSW5mb3JtYXRpb25PcHRpb25zLFxuICAgIEluZm9ybWF0aW9uT3B0aW9uc1Jlc3BvbnNlLFxuICAgIGNvbXBsZXRlQ2hhdEZyb21Qcm9tcHQsXG4gICAgZ2V0RGF0ZVJhbmdlRnJvbU1vZGVsLFxuICAgIGdldE5lZWRlZEluZm9ybWF0aW9uRnJvbU1vZGVsLFxufSBmcm9tICcuL2dwdCdcbmltcG9ydCB7IER5bmFtb0RCQ2xpZW50LCBRdWVyeUNvbW1hbmQsIFF1ZXJ5Q29tbWFuZE91dHB1dCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1keW5hbW9kYidcbmltcG9ydCB7IEdldENhY2hlRW50aXR5LCBHZXRFbnRpdGllcywgUHV0Q2FjaGVFbnRpdHkgfSBmcm9tICcuL3F1ZXJpZXMvRW50aXRpZXMnXG5pbXBvcnQgeyBtYXBKb2ludERhdGFUb0NoYXRJbnB1dCwgbWFwU2VjdXJpdGllc1RvSm9pbmVkRGF0YSB9IGZyb20gJy4vbWFwcGVycy9TZWN1cml0eSdcbmltcG9ydCB7IG1hcEFjY291bnRUb0NoYXRJbnB1dCwgbWFwRHluYW1vREJUb0FjY291bnQgfSBmcm9tICcuL21hcHBlcnMvQWNjb3VudHMnXG5pbXBvcnQgeyBtYXBEeW5hbW9EQlRvVHJhbnNhY3Rpb24sIG1hcFRyYW5zYWN0aW9uVG9DaGF0SW5wdXQgfSBmcm9tICcuL21hcHBlcnMvVHJhbnNhY3Rpb25zJ1xuaW1wb3J0IHsgbWFwRGRiUmVzcG9uc2VUb0NhY2hlRW50aXR5IH0gZnJvbSAnLi9tYXBwZXJzL0NhY2hlRW50aXR5J1xuY29uc3QgY2xpZW50ID0gbmV3IER5bmFtb0RCQ2xpZW50KHsgcmVnaW9uOiAnY2EtY2VudHJhbC0xJyB9KVxuXG5jb25zdCBkYXRlU3VwcG9ydGVkRmlsdGVyaW5nID0gWydUUkFOU0FDVElPTiddXG5leHBvcnQgdHlwZSBFbnRpdHlOYW1lID0gJ1NFQ1VSSVRZJyB8ICdUUkFOU0FDVElPTicgfCAnQUNDT1VOVCdcbmNvbnN0IG1hcE9mSW5mb3JtYXRpb25PcHRpb25Ub0tleTogUmVjb3JkPHN0cmluZywgRW50aXR5TmFtZT4gPSB7XG4gICAgQkFOS0FDQ09VTlRTOiAnQUNDT1VOVCcsXG4gICAgSU5WRVNUTUVOVFM6ICdTRUNVUklUWScsXG4gICAgVFJBTlNBQ1RJT05TOiAnVFJBTlNBQ1RJT04nLFxufVxuXG5jb25zdCBtYXBPZkNhY2hlVHlwZVRvRXhwaXJ5OiBSZWNvcmQ8Q2FjaGVUeXBlLCBudW1iZXI+ID0ge1xuICAgIFtDYWNoZVR5cGUuSW52ZXN0bWVudEFuYWx5c2lzXTogNjAgKiA2MCAqIDEwMDAsXG4gICAgW0NhY2hlVHlwZS5Qb3J0Zm9saW9BbmFseXNpc106IDYwICogNjAgKiAxMDAwICogMjQsXG4gICAgW0NhY2hlVHlwZS5TdG9ja0FuYWx5c2lzXTogNjAgKiA2MCAqIDEwMDAgKiAyNCxcbiAgICBbQ2FjaGVUeXBlLlN0b2NrTmV3c106IDYwICogNjAgKiAxMDAwLFxufVxuXG5leHBvcnQgY29uc3QgZ2V0UmVzcG9uc2VVc2luZ0ZpbmFuY2lhbENvbnRleHQ6IEFwcFN5bmNSZXNvbHZlckhhbmRsZXI8YW55LCBDaGF0UmVzcG9uc2U+ID0gYXN5bmMgKFxuICAgIGV2ZW50OiBBcHBTeW5jUmVzb2x2ZXJFdmVudDx7IGNoYXQ6IENoYXRRdWVyeSB9PixcbiAgICBjb250ZXh0OiBDb250ZXh0XG4pID0+IHtcbiAgICBjb25zb2xlLmluZm8oJ0dldCByZXNwb25zZSBmb3InLCBldmVudClcbiAgICBsZXQgbmVlZGVkSW5mbzogeyBvcHRpb25zRm9ySW5mb3JtYXRpb246IEluZm9ybWF0aW9uT3B0aW9uc1tdIH0gPSB7IG9wdGlvbnNGb3JJbmZvcm1hdGlvbjogW10gfVxuICAgIGxldCBkYXRlUmFuZ2VSZXNwb25zZTogYW55XG4gICAgaWYgKGV2ZW50LmFyZ3VtZW50cy5jaGF0LnNob3VsZFJhZ0ZldGNoKSB7XG4gICAgICAgIGNvbnN0IGluZm9ybWF0aW9uTmVlZGVkID0gZ2V0TmVlZGVkSW5mb3JtYXRpb25Gcm9tTW9kZWwoZXZlbnQuYXJndW1lbnRzLmNoYXQucHJvbXB0IHx8ICcnKVxuICAgICAgICBjb25zdCBkYXRlUmFuZ2UgPSBnZXREYXRlUmFuZ2VGcm9tTW9kZWwoZXZlbnQuYXJndW1lbnRzLmNoYXQucHJvbXB0IHx8ICcnKVxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbaW5mb3JtYXRpb25OZWVkZWQsIGRhdGVSYW5nZV0pXG4gICAgICAgIG5lZWRlZEluZm8gPSBKU09OLnBhcnNlKChhd2FpdCBpbmZvcm1hdGlvbk5lZWRlZCkuY29udGVudCB8fCAnJylcbiAgICAgICAgZGF0ZVJhbmdlUmVzcG9uc2UgPSBKU09OLnBhcnNlKChhd2FpdCBkYXRlUmFuZ2UpLmNvbnRlbnQgfHwgJycpXG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmFyZ3VtZW50cy5jaGF0LmNhY2hlSWRlbnRpZmllcnMpIHtcbiAgICAgICAgY29uc3QgY2FjaGVDaGVja3MgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgICAgIGV2ZW50LmFyZ3VtZW50cy5jaGF0LmNhY2hlSWRlbnRpZmllcnMubWFwKChpZCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQuc2VuZChcbiAgICAgICAgICAgICAgICAgICAgR2V0Q2FjaGVFbnRpdHkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGlkLmtleSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGlyZXNBdDogbWFwT2ZDYWNoZVR5cGVUb0V4cGlyeVtpZC5jYWNoZVR5cGUhXSArIERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgICBjb25zdCBpdGVtSGl0cyA9IGNhY2hlQ2hlY2tzLmZsYXRNYXAoKGVsKSA9PiBlbC5JdGVtcyA/PyBbXSlcbiAgICAgICAgaWYgKGl0ZW1IaXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZTogaXRlbUhpdHMubWFwKG1hcERkYlJlc3BvbnNlVG9DYWNoZUVudGl0eSkuam9pbignJykgfHwgJycsXG4gICAgICAgICAgICAgICAgX190eXBlbmFtZTogJ0NoYXRSZXNwb25zZScsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKFxuICAgICAgICBldmVudC5hcmd1bWVudHMuY2hhdC5jaGF0Rm9jdXMgPT09IENoYXRGb2N1cy5JbnZlc3RtZW50ICYmXG4gICAgICAgICFuZWVkZWRJbmZvLm9wdGlvbnNGb3JJbmZvcm1hdGlvbi5maW5kKChlbCkgPT4gZWwgPT09IEluZm9ybWF0aW9uT3B0aW9ucy5JTlZFU1RNRU5UUylcbiAgICApIHtcbiAgICAgICAgbmVlZGVkSW5mby5vcHRpb25zRm9ySW5mb3JtYXRpb24ucHVzaCgnSU5WRVNUTUVOVFMnIGFzIGFueSlcbiAgICB9XG5cbiAgICBjb25zb2xlLmluZm8oJ0NvbnRleHQ6ICcsIGNvbnRleHQpXG4gICAgY29uc29sZS5pbmZvKCdOZWVkZWQgaW5mbyAnLCBuZWVkZWRJbmZvKVxuICAgIGNvbnNvbGUuaW5mbygnRGF0ZSByYW5nZTogJywgZGF0ZVJhbmdlUmVzcG9uc2UpXG4gICAgY29uc3QgdXNlciA9IChldmVudC5pZGVudGl0eSBhcyBBcHBTeW5jSWRlbnRpdHlDb2duaXRvKT8udXNlcm5hbWVcbiAgICBsZXQgdHVwbGVPZlR5cGVUb0VsZW1lbnRzOiBbSW5mb3JtYXRpb25PcHRpb25zLCBRdWVyeUNvbW1hbmRPdXRwdXRdW11cbiAgICB0dXBsZU9mVHlwZVRvRWxlbWVudHMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgbmVlZGVkSW5mby5vcHRpb25zRm9ySW5mb3JtYXRpb24ubWFwKGFzeW5jIChvcHRpb24pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVudGl0eU5hbWUgPSBtYXBPZkluZm9ybWF0aW9uT3B0aW9uVG9LZXlbb3B0aW9uXS50b1N0cmluZygpXG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIG9wdGlvbixcbiAgICAgICAgICAgICAgICBhd2FpdCBjbGllbnQuc2VuZChcbiAgICAgICAgICAgICAgICAgICAgR2V0RW50aXRpZXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXIgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZXZlbnQuYXJndW1lbnRzLmNoYXQuYWNjb3VudElkIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVJhbmdlOiBlbnRpdHlOYW1lIGluIGRhdGVTdXBwb3J0ZWRGaWx0ZXJpbmcgPyBkYXRlUmFuZ2VSZXNwb25zZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eU5hbWU6IGVudGl0eU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSlcbiAgICApXG5cbiAgICAvKiogR2V0IHRoZSBjb250ZXh0dWFsIGRhdGEgKi9cbiAgICBjb25zdCBkZGJSZXNwb25zZXMgPSB0dXBsZU9mVHlwZVRvRWxlbWVudHMubWFwKCh0dXBsZSkgPT4ge1xuICAgICAgICBpZiAodHVwbGVbMF0udG9TdHJpbmcoKSA9PT0gJ0lOVkVTVE1FTlRTJykge1xuICAgICAgICAgICAgY29uc3QgbWFwcGVkRGF0YSA9IG1hcFNlY3VyaXRpZXNUb0pvaW5lZERhdGEodHVwbGVbMV0uSXRlbXMgPz8gW10pXG4gICAgICAgICAgICByZXR1cm4gJ1xcbkludmVzdG1lbnRzOlxcbicgKyBtYXBKb2ludERhdGFUb0NoYXRJbnB1dChtYXBwZWREYXRhKVxuICAgICAgICB9IGVsc2UgaWYgKHR1cGxlWzBdLnRvU3RyaW5nKCkgPT09ICdUUkFOU0FDVElPTlMnKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICdcXG5UcmFuYXNhY3Rpb25zOlxcbicgK1xuICAgICAgICAgICAgICAgICh0dXBsZVsxXS5JdGVtcyA/PyBbXSkubWFwKG1hcER5bmFtb0RCVG9UcmFuc2FjdGlvbikubWFwKG1hcFRyYW5zYWN0aW9uVG9DaGF0SW5wdXQpLmpvaW4oJycpXG4gICAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSBpZiAodHVwbGVbMF0udG9TdHJpbmcoKSA9PT0gJ0JBTktBQ0NPVU5UUycpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgJ1xcbkFjY291bnRzOlxcbicgKyAodHVwbGVbMV0uSXRlbXMgPz8gW10pLm1hcChtYXBEeW5hbW9EQlRvQWNjb3VudCkubWFwKG1hcEFjY291bnRUb0NoYXRJbnB1dCkuam9pbignJylcbiAgICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVU5SRUNPR05JWkVEIE9QVElPTiAnICsgdHVwbGVbMF0pXG4gICAgICAgIH1cbiAgICB9KVxuICAgIGNvbnN0IHJhZ0RhdGEgPSBkZGJSZXNwb25zZXMuam9pbignJylcbiAgICBjb25zb2xlLmluZm8oJ0ZJTkFMIFJBRyBEQVRBOiAnLCByYWdEYXRhKVxuICAgIGNvbnN0IHsgcHJvbXB0IH0gPSBldmVudC5hcmd1bWVudHMuY2hhdFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29tcGxldGVDaGF0RnJvbVByb21wdChcbiAgICAgICAgcHJvbXB0ICsgJyBVc2UgdGhpcyBkYXRhIGZvciB5b3VyIGFuc3dlcjogJyArIHJhZ0RhdGEgfHwgJycsXG4gICAgICAgIGV2ZW50LmFyZ3VtZW50cy5jaGF0LmNoYXRGb2N1cyxcbiAgICAgICAgdXNlcixcbiAgICAgICAgZXZlbnQuYXJndW1lbnRzLmNoYXQucmVxdWlyZXNMaXZlRGF0YSA/PyBmYWxzZSxcbiAgICAgICAgZXZlbnQuYXJndW1lbnRzLmNoYXQuY2hhdFR5cGUgPz8gQ2hhdFR5cGUuUmVndWxhclxuICAgIClcbiAgICBldmVudC5hcmd1bWVudHMuY2hhdC5jYWNoZUlkZW50aWZpZXJzPy5tYXAoKGlkKSA9PiB7XG4gICAgICAgIGNsaWVudC5zZW5kKFxuICAgICAgICAgICAgUHV0Q2FjaGVFbnRpdHkoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZDogaWQua2V5IHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBleHBpcmVzQXQ6IG1hcE9mQ2FjaGVUeXBlVG9FeHBpcnlbaWQuY2FjaGVUeXBlIV0gKyBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge31cbiAgICAgICAgICAgIClcbiAgICAgICAgKVxuICAgIH0pXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlIHx8ICcnLFxuICAgICAgICBfX3R5cGVuYW1lOiAnQ2hhdFJlc3BvbnNlJyxcbiAgICB9XG59XG4iXX0=