"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapTransactionToChatInput = void 0;
exports.mapDynamoDBToTransaction = mapDynamoDBToTransaction;
// Mapper function for DynamoDB to Transaction interface
function mapDynamoDBToTransaction(item) {
    return {
        __typename: 'Transaction', // Fixed typename value
        transaction_id: item.transaction_id?.S || '', // DynamoDB string type
        account_id: item.account_id?.S || null, // Nullable string
        amount: item.amount?.N || null, // Nullable string
        name: item.name?.S || null, // Nullable string
        iso_currency_code: item.iso_currency_code?.S || null, // Nullable string
        date: item.date?.S || null, // Nullable string
        payment_channel: item.payment_channel?.S || null, // Nullable string
        transaction_type: item.transaction_type?.S || null, // Nullable string
    };
}
const mapTransactionToChatInput = (transaction) => {
    let chatInput = '';
    // Build the chat input string using the fields in the Transaction object
    chatInput += `(Amount: ${transaction.amount ? `$${parseFloat(transaction.amount).toFixed(2)}` : 'N/A'}\n`;
    chatInput += `Name: ${transaction.name || 'N/A'}\n`;
    chatInput += `Currency: ${transaction.iso_currency_code || 'N/A'}\n`;
    chatInput += `Date: ${transaction.date || 'N/A'}\n`;
    chatInput += `Transaction Type: ${transaction.transaction_type || 'N/A'})\n`;
    return chatInput;
};
exports.mapTransactionToChatInput = mapTransactionToChatInput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhbnNhY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hcHBlcnMvVHJhbnNhY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLDREQVlDO0FBYkQsd0RBQXdEO0FBQ3hELFNBQWdCLHdCQUF3QixDQUFDLElBQXVDO0lBQzVFLE9BQU87UUFDSCxVQUFVLEVBQUUsYUFBYSxFQUFFLHVCQUF1QjtRQUNsRCxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLHVCQUF1QjtRQUNyRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLGtCQUFrQjtRQUMxRCxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLGtCQUFrQjtRQUNsRCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLGtCQUFrQjtRQUM5QyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLElBQUksRUFBRSxrQkFBa0I7UUFDeEUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksRUFBRSxrQkFBa0I7UUFDOUMsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJLElBQUksRUFBRSxrQkFBa0I7UUFDcEUsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsa0JBQWtCO0tBQ3pFLENBQUE7QUFDTCxDQUFDO0FBRU0sTUFBTSx5QkFBeUIsR0FBRyxDQUFDLFdBQXdCLEVBQVUsRUFBRTtJQUMxRSxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUE7SUFDbEIseUVBQXlFO0lBQ3pFLFNBQVMsSUFBSSxZQUFZLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUE7SUFDekcsU0FBUyxJQUFJLFNBQVMsV0FBVyxDQUFDLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQTtJQUNuRCxTQUFTLElBQUksYUFBYSxXQUFXLENBQUMsaUJBQWlCLElBQUksS0FBSyxJQUFJLENBQUE7SUFDcEUsU0FBUyxJQUFJLFNBQVMsV0FBVyxDQUFDLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQTtJQUNuRCxTQUFTLElBQUkscUJBQXFCLFdBQVcsQ0FBQyxnQkFBZ0IsSUFBSSxLQUFLLEtBQUssQ0FBQTtJQUM1RSxPQUFPLFNBQVMsQ0FBQTtBQUNwQixDQUFDLENBQUE7QUFUWSxRQUFBLHlCQUF5Qiw2QkFTckMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdHRyaWJ1dGVWYWx1ZSB9IGZyb20gJ2F3cy1zZGsvY2xpZW50cy9keW5hbW9kYidcbmltcG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vQVBJJ1xuXG4vLyBNYXBwZXIgZnVuY3Rpb24gZm9yIER5bmFtb0RCIHRvIFRyYW5zYWN0aW9uIGludGVyZmFjZVxuZXhwb3J0IGZ1bmN0aW9uIG1hcER5bmFtb0RCVG9UcmFuc2FjdGlvbihpdGVtOiB7IFtrZXk6IHN0cmluZ106IEF0dHJpYnV0ZVZhbHVlIH0pOiBUcmFuc2FjdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgX190eXBlbmFtZTogJ1RyYW5zYWN0aW9uJywgLy8gRml4ZWQgdHlwZW5hbWUgdmFsdWVcbiAgICAgICAgdHJhbnNhY3Rpb25faWQ6IGl0ZW0udHJhbnNhY3Rpb25faWQ/LlMgfHwgJycsIC8vIER5bmFtb0RCIHN0cmluZyB0eXBlXG4gICAgICAgIGFjY291bnRfaWQ6IGl0ZW0uYWNjb3VudF9pZD8uUyB8fCBudWxsLCAvLyBOdWxsYWJsZSBzdHJpbmdcbiAgICAgICAgYW1vdW50OiBpdGVtLmFtb3VudD8uTiB8fCBudWxsLCAvLyBOdWxsYWJsZSBzdHJpbmdcbiAgICAgICAgbmFtZTogaXRlbS5uYW1lPy5TIHx8IG51bGwsIC8vIE51bGxhYmxlIHN0cmluZ1xuICAgICAgICBpc29fY3VycmVuY3lfY29kZTogaXRlbS5pc29fY3VycmVuY3lfY29kZT8uUyB8fCBudWxsLCAvLyBOdWxsYWJsZSBzdHJpbmdcbiAgICAgICAgZGF0ZTogaXRlbS5kYXRlPy5TIHx8IG51bGwsIC8vIE51bGxhYmxlIHN0cmluZ1xuICAgICAgICBwYXltZW50X2NoYW5uZWw6IGl0ZW0ucGF5bWVudF9jaGFubmVsPy5TIHx8IG51bGwsIC8vIE51bGxhYmxlIHN0cmluZ1xuICAgICAgICB0cmFuc2FjdGlvbl90eXBlOiBpdGVtLnRyYW5zYWN0aW9uX3R5cGU/LlMgfHwgbnVsbCwgLy8gTnVsbGFibGUgc3RyaW5nXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgbWFwVHJhbnNhY3Rpb25Ub0NoYXRJbnB1dCA9ICh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24pOiBzdHJpbmcgPT4ge1xuICAgIGxldCBjaGF0SW5wdXQgPSAnJ1xuICAgIC8vIEJ1aWxkIHRoZSBjaGF0IGlucHV0IHN0cmluZyB1c2luZyB0aGUgZmllbGRzIGluIHRoZSBUcmFuc2FjdGlvbiBvYmplY3RcbiAgICBjaGF0SW5wdXQgKz0gYChBbW91bnQ6ICR7dHJhbnNhY3Rpb24uYW1vdW50ID8gYCQke3BhcnNlRmxvYXQodHJhbnNhY3Rpb24uYW1vdW50KS50b0ZpeGVkKDIpfWAgOiAnTi9BJ31cXG5gXG4gICAgY2hhdElucHV0ICs9IGBOYW1lOiAke3RyYW5zYWN0aW9uLm5hbWUgfHwgJ04vQSd9XFxuYFxuICAgIGNoYXRJbnB1dCArPSBgQ3VycmVuY3k6ICR7dHJhbnNhY3Rpb24uaXNvX2N1cnJlbmN5X2NvZGUgfHwgJ04vQSd9XFxuYFxuICAgIGNoYXRJbnB1dCArPSBgRGF0ZTogJHt0cmFuc2FjdGlvbi5kYXRlIHx8ICdOL0EnfVxcbmBcbiAgICBjaGF0SW5wdXQgKz0gYFRyYW5zYWN0aW9uIFR5cGU6ICR7dHJhbnNhY3Rpb24udHJhbnNhY3Rpb25fdHlwZSB8fCAnTi9BJ30pXFxuYFxuICAgIHJldHVybiBjaGF0SW5wdXRcbn1cbiJdfQ==