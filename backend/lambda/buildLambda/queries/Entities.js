"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetUser = exports.GetItems = exports.PutCacheEntity = exports.GetCacheEntity = exports.GetEntities = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
function mapStartDayToDate(startDay) {
    const { day, month, year } = startDay;
    // Ensure the day and month are two digits by padding them with zeroes
    const formattedDay = String(day).padStart(2, '0');
    const formattedMonth = String(month).padStart(2, '0'); // Months should be zero-padded
    // Return the date in 'YYYY-MM-DD' format
    return `${year}-${formattedMonth}-${formattedDay}`;
}
// SECURITY and ACCOUNT dont have date range in key
const GetEntities = (params) => {
    let filter = {
        KeyConditionExpression: 'pk = :pk AND begins_with(sk, :sk)',
        ExpressionAttributeValues: {
            ':pk': { S: params.pk ?? `USER#${params.username}#ITEM#${params.id}` },
            ':sk': { S: `${params.entityName}` },
        },
    };
    if (params.dateRange && !params.dateRange.hasNoTimeConstraint) {
        filter = { ...filter, ExpressionAttributeNames: {} };
        filter['FilterExpression'] = '#date BETWEEN :startDate AND :endDate';
        filter['ExpressionAttributeValues'][':startDate'] = { S: mapStartDayToDate(params.dateRange.startDay) };
        filter['ExpressionAttributeValues'][':endDate'] = { S: mapStartDayToDate(params.dateRange.endDay) };
        filter['ExpressionAttributeNames'] = { '#date': 'date' };
    }
    if (params.customDateRange) {
        filter = { ...filter, ExpressionAttributeNames: {} };
        filter['FilterExpression'] = '#date BETWEEN :startDate AND :endDate';
        filter['ExpressionAttributeValues'][':startDate'] = {
            S: params.customDateRange[0] ? new Date(params.customDateRange[0]).toISOString().split('.')[0] : 0,
        };
        filter['ExpressionAttributeValues'][':endDate'] = {
            S: params.customDateRange[1]
                ? new Date(params.customDateRange[1]).toISOString().split('.')[0]
                : new Date().toISOString().split('.')[0],
        };
        filter['ExpressionAttributeNames'] = { '#date': 'date' };
    }
    if (params.highLevelCategory) {
        if (!filter['FilterExpression']) {
            filter['FilterExpression'] = '#finance = :primaryCategory';
        }
        else {
            filter['FilterExpression'] = filter['FilterExpression'] + ' AND #finance = :primaryCategory';
        }
        filter['ExpressionAttributeValues'][':primaryCategory'] = {
            S: params.highLevelCategory,
        };
        filter['ExpressionAttributeNames'] = {
            ...(filter['ExpressionAttributeNames'] ?? {}),
            '#finance': 'personal_finance_category.primary',
        };
    }
    return new client_dynamodb_1.QueryCommand({
        TableName: process.env.TABLE_NAME,
        ...filter,
    });
};
exports.GetEntities = GetEntities;
const GetCacheEntity = (params) => {
    const filter = {
        KeyConditionExpression: 'pk = :pk',
        ExpressionAttributeValues: {
            ':pk': { S: `CACHEENTITY#${params.id}` },
        },
    };
    if (params.expiresAt) {
        // Adding the FilterExpression to check if ExpiresAt is less than the provided expiresAt
        filter['FilterExpression'] = '#expiresAt < :expiresAt';
        filter['ExpressionAttributeNames'] = {
            '#expiresAt': 'ExpiresAt', // Using attribute name mapping for ExpiresAt
        };
        filter['ExpressionAttributeValues'][':expiresAt'] = { N: params.expiresAt.toString() }; // Assuming expiresAt is a number (timestamp)
    }
    console.info(params);
    return new client_dynamodb_1.QueryCommand({
        TableName: process.env.TABLE_NAME,
        ...filter,
    });
};
exports.GetCacheEntity = GetCacheEntity;
const PutCacheEntity = (params, data) => {
    const item = {
        pk: `CACHEENTITY#${params.id}`,
        ExpiresAt: params.expiresAt, // Storing ExpiresAt as a number (timestamp)
        ...data, // Spread any additional data attributes
    };
    return new client_dynamodb_1.PutItemCommand({
        TableName: process.env.TABLE_NAME,
        Item: item,
    });
};
exports.PutCacheEntity = PutCacheEntity;
const GetItems = () => {
    const filter = {
        KeyConditionExpression: 'pk = :pk',
        ExpressionAttributeValues: {
            ':pk': { S: `ITEMS` },
        },
    };
    return new client_dynamodb_1.QueryCommand({
        TableName: process.env.TABLE_NAME,
        ...filter,
    });
};
exports.GetItems = GetItems;
const GetUser = (id) => {
    const filter = {
        KeyConditionExpression: 'pk = :pk and sk = :sk',
        ExpressionAttributeValues: {
            ':pk': { S: id },
            ':sk': { S: 'v0' },
        },
    };
    return new client_dynamodb_1.QueryCommand({
        TableName: process.env.TABLE_NAME,
        ...filter,
    });
};
exports.GetUser = GetUser;
//# sourceMappingURL=data:application/json;base64,