"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetEntities = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
function mapStartDayToDate(startDay) {
    const { day, month, year } = startDay;
    // Ensure the day and month are two digits by padding them with zeroes
    const formattedDay = String(day).padStart(2, '0');
    const formattedMonth = String(month).padStart(2, '0'); // Months should be zero-padded
    // Return the date in 'YYYY-MM-DD' format
    return `${year}-${formattedMonth}-${formattedDay}`;
}
// SECURITY and ACCOUNT dont have date range in key
const GetEntities = (params) => {
    const filter = {
        KeyConditionExpression: '#pk = :pk AND begins_with(#sk, :sk)',
        ExpressionAttributeValues: {
            ':pk': { S: `USER#${params.username}#ITEM#${params.id}` },
            ':sk': { S: `${params.entityName}` },
        },
    };
    if (params.dateRange && !params.dateRange.hasNoTimeConstraint) {
        filter['FilterExpression'] = '#date BETWEEN :startDate AND :endDate';
        filter['ExpressionAttributeValues'][':startDate'] = { S: mapStartDayToDate(params.dateRange.startDay) };
        filter['ExpressionAttributeValues'][':endDate'] = { S: mapStartDayToDate(params.dateRange.endDay) };
    }
    return new client_dynamodb_1.QueryCommand({
        TableName: process.env.TABLE_NAME,
        ...filter,
    });
};
exports.GetEntities = GetEntities;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50aXRpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcXVlcmllcy9FbnRpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4REFBdUQ7QUFVdkQsU0FBUyxpQkFBaUIsQ0FBQyxRQUF5QjtJQUNoRCxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUE7SUFFckMsc0VBQXNFO0lBQ3RFLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ2pELE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBLENBQUMsK0JBQStCO0lBRXJGLHlDQUF5QztJQUN6QyxPQUFPLEdBQUcsSUFBSSxJQUFJLGNBQWMsSUFBSSxZQUFZLEVBQUUsQ0FBQTtBQUN0RCxDQUFDO0FBRUQsbURBQW1EO0FBQzVDLE1BQU0sV0FBVyxHQUFHLENBQUMsTUFBeUIsRUFBRSxFQUFFO0lBQ3JELE1BQU0sTUFBTSxHQUFRO1FBQ2hCLHNCQUFzQixFQUFFLHFDQUFxQztRQUM3RCx5QkFBeUIsRUFBRTtZQUN2QixLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxNQUFNLENBQUMsUUFBUSxTQUFTLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRTtZQUN6RCxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUU7U0FDdkM7S0FDSixDQUFBO0lBQ0QsSUFBSSxNQUFNLENBQUMsU0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzVELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLHVDQUF1QyxDQUFBO1FBQ3BFLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQTtRQUN2RyxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUE7SUFDdkcsQ0FBQztJQUNELE9BQU8sSUFBSSw4QkFBWSxDQUFDO1FBQ3BCLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVU7UUFDakMsR0FBRyxNQUFNO0tBQ1osQ0FBQyxDQUFBO0FBQ04sQ0FBQyxDQUFBO0FBakJZLFFBQUEsV0FBVyxlQWlCdkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWVyeUNvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtZHluYW1vZGInXG5pbXBvcnQgeyBEYXRhUmFuZ2VSZXNwb25zZSwgR3B0RGF0ZVJlc3BvbnNlLCBJbmZvcm1hdGlvbk9wdGlvbnMgfSBmcm9tICcuLi9ncHQnXG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5UXVlcnlQYXJhbXMge1xuICAgIHVzZXJuYW1lOiBzdHJpbmdcbiAgICBpZDogc3RyaW5nXG4gICAgZGF0ZVJhbmdlOiBEYXRhUmFuZ2VSZXNwb25zZSB8IHVuZGVmaW5lZFxuICAgIGVudGl0eU5hbWU6IEluZm9ybWF0aW9uT3B0aW9uc1xufVxuXG5mdW5jdGlvbiBtYXBTdGFydERheVRvRGF0ZShzdGFydERheTogR3B0RGF0ZVJlc3BvbnNlKTogc3RyaW5nIHtcbiAgICBjb25zdCB7IGRheSwgbW9udGgsIHllYXIgfSA9IHN0YXJ0RGF5XG5cbiAgICAvLyBFbnN1cmUgdGhlIGRheSBhbmQgbW9udGggYXJlIHR3byBkaWdpdHMgYnkgcGFkZGluZyB0aGVtIHdpdGggemVyb2VzXG4gICAgY29uc3QgZm9ybWF0dGVkRGF5ID0gU3RyaW5nKGRheSkucGFkU3RhcnQoMiwgJzAnKVxuICAgIGNvbnN0IGZvcm1hdHRlZE1vbnRoID0gU3RyaW5nKG1vbnRoKS5wYWRTdGFydCgyLCAnMCcpIC8vIE1vbnRocyBzaG91bGQgYmUgemVyby1wYWRkZWRcblxuICAgIC8vIFJldHVybiB0aGUgZGF0ZSBpbiAnWVlZWS1NTS1ERCcgZm9ybWF0XG4gICAgcmV0dXJuIGAke3llYXJ9LSR7Zm9ybWF0dGVkTW9udGh9LSR7Zm9ybWF0dGVkRGF5fWBcbn1cblxuLy8gU0VDVVJJVFkgYW5kIEFDQ09VTlQgZG9udCBoYXZlIGRhdGUgcmFuZ2UgaW4ga2V5XG5leHBvcnQgY29uc3QgR2V0RW50aXRpZXMgPSAocGFyYW1zOiBFbnRpdHlRdWVyeVBhcmFtcykgPT4ge1xuICAgIGNvbnN0IGZpbHRlcjogYW55ID0ge1xuICAgICAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uOiAnI3BrID0gOnBrIEFORCBiZWdpbnNfd2l0aCgjc2ssIDpzayknLFxuICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICAgICAgICAnOnBrJzogeyBTOiBgVVNFUiMke3BhcmFtcy51c2VybmFtZX0jSVRFTSMke3BhcmFtcy5pZH1gIH0sXG4gICAgICAgICAgICAnOnNrJzogeyBTOiBgJHtwYXJhbXMuZW50aXR5TmFtZX1gIH0sXG4gICAgICAgIH0sXG4gICAgfVxuICAgIGlmIChwYXJhbXMuZGF0ZVJhbmdlICYmICFwYXJhbXMuZGF0ZVJhbmdlLmhhc05vVGltZUNvbnN0cmFpbnQpIHtcbiAgICAgICAgZmlsdGVyWydGaWx0ZXJFeHByZXNzaW9uJ10gPSAnI2RhdGUgQkVUV0VFTiA6c3RhcnREYXRlIEFORCA6ZW5kRGF0ZSdcbiAgICAgICAgZmlsdGVyWydFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzJ11bJzpzdGFydERhdGUnXSA9IHsgUzogbWFwU3RhcnREYXlUb0RhdGUocGFyYW1zLmRhdGVSYW5nZS5zdGFydERheSkgfVxuICAgICAgICBmaWx0ZXJbJ0V4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMnXVsnOmVuZERhdGUnXSA9IHsgUzogbWFwU3RhcnREYXlUb0RhdGUocGFyYW1zLmRhdGVSYW5nZS5lbmREYXkpIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBRdWVyeUNvbW1hbmQoe1xuICAgICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRBQkxFX05BTUUsXG4gICAgICAgIC4uLmZpbHRlcixcbiAgICB9KVxufVxuIl19