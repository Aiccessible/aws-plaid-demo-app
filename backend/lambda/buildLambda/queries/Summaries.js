"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadSpendingSummaries = uploadSpendingSummaries;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
// Define DynamoDB client
const client = new client_dynamodb_1.DynamoDBClient({ region: 'ca-central-1' });
// Function to upload results to DynamoDB
async function uploadSpendingSummaries(userId, dailySummaries, monthlySummaries) {
    // Upload daily summaries
    for (const dailySummary of dailySummaries) {
        const pk = `${userId}#DAILYSUMMARY`;
        const sk = `${dailySummary.date}`; // `date` format is expected as YYYY-MM-DD
        const command = new client_dynamodb_1.PutItemCommand({
            TableName: process.env.TABLE_NAME,
            Item: {
                pk: { S: pk },
                sk: { S: sk },
                spending: {
                    M: Object.entries(dailySummary.spending).reduce((acc, [category, amount]) => {
                        acc[category] = { N: amount.toFixed(2) }; // Convert spending amounts to strings for DDB
                        return acc;
                    }, {}),
                },
            },
        });
        try {
            await client.send(command);
            console.log(`Uploaded daily summary for ${dailySummary.date}`);
        }
        catch (error) {
            console.error(`Error uploading daily summary for ${dailySummary.date}:`, error);
        }
    }
    // Upload monthly summaries
    for (const [monthYear, monthlySummary] of Object.entries(monthlySummaries)) {
        const pk = `${userId}#MONTHLYSUMMARY`;
        const sk = `${monthYear}`; // Format: YEARMONTH (e.g., 202401 for January 2024)
        const command = new client_dynamodb_1.PutItemCommand({
            TableName: process.env.TABLE_NAME,
            Item: {
                pk: { S: pk },
                sk: { S: sk },
                spending: {
                    M: Object.entries(monthlySummary.monthly_spending).reduce((acc, [category, amount]) => {
                        acc[category] = { N: amount.toFixed(2) };
                        return acc;
                    }, {}),
                },
            },
        });
        try {
            await client.send(command);
            console.log(`Uploaded monthly summary for ${monthYear}`);
        }
        catch (error) {
            console.error(`Error uploading monthly summary for ${monthYear}:`, error);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3VtbWFyaWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3F1ZXJpZXMvU3VtbWFyaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBT0EsMERBMERDO0FBakVELDhEQUF5RTtBQUd6RSx5QkFBeUI7QUFDekIsTUFBTSxNQUFNLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUE7QUFFN0QseUNBQXlDO0FBQ2xDLEtBQUssVUFBVSx1QkFBdUIsQ0FDekMsTUFBYyxFQUNkLGNBQXNDLEVBQ3RDLGdCQUE2RDtJQUU3RCx5QkFBeUI7SUFDekIsS0FBSyxNQUFNLFlBQVksSUFBSSxjQUFjLEVBQUUsQ0FBQztRQUN4QyxNQUFNLEVBQUUsR0FBRyxHQUFHLE1BQU0sZUFBZSxDQUFBO1FBQ25DLE1BQU0sRUFBRSxHQUFHLEdBQUcsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFBLENBQUMsMENBQTBDO1FBRTVFLE1BQU0sT0FBTyxHQUFHLElBQUksZ0NBQWMsQ0FBQztZQUMvQixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVO1lBQ2pDLElBQUksRUFBRTtnQkFDRixFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO2dCQUNiLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7Z0JBQ2IsUUFBUSxFQUFFO29CQUNOLENBQUMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRTt3QkFDeEUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFDLDhDQUE4Qzt3QkFDdkYsT0FBTyxHQUFHLENBQUE7b0JBQ2QsQ0FBQyxFQUFFLEVBQW1DLENBQUM7aUJBQzFDO2FBQ0o7U0FDSixDQUFDLENBQUE7UUFFRixJQUFJLENBQUM7WUFDRCxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7UUFDbEUsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxZQUFZLENBQUMsSUFBSSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDbkYsQ0FBQztJQUNMLENBQUM7SUFFRCwyQkFBMkI7SUFDM0IsS0FBSyxNQUFNLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDO1FBQ3pFLE1BQU0sRUFBRSxHQUFHLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQTtRQUNyQyxNQUFNLEVBQUUsR0FBRyxHQUFHLFNBQVMsRUFBRSxDQUFBLENBQUMsb0RBQW9EO1FBRTlFLE1BQU0sT0FBTyxHQUFHLElBQUksZ0NBQWMsQ0FBQztZQUMvQixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVO1lBQ2pDLElBQUksRUFBRTtnQkFDRixFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO2dCQUNiLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7Z0JBQ2IsUUFBUSxFQUFFO29CQUNOLENBQUMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFO3dCQUNsRixHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO3dCQUN4QyxPQUFPLEdBQUcsQ0FBQTtvQkFDZCxDQUFDLEVBQUUsRUFBbUMsQ0FBQztpQkFDMUM7YUFDSjtTQUNKLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQztZQUNELE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxTQUFTLEVBQUUsQ0FBQyxDQUFBO1FBQzVELENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsU0FBUyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDN0UsQ0FBQztJQUNMLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREJDbGllbnQsIFB1dEl0ZW1Db21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiJ1xuaW1wb3J0IHsgQWdncmVnYXRlZFNwZW5kaW5nLCBEYWlseVNwZW5kaW5nU3VtbWFyeSB9IGZyb20gJy4uL2NhbGN1bGF0ZUluY29tZUFuZFNwZW5kaW5nJ1xuXG4vLyBEZWZpbmUgRHluYW1vREIgY2xpZW50XG5jb25zdCBjbGllbnQgPSBuZXcgRHluYW1vREJDbGllbnQoeyByZWdpb246ICdjYS1jZW50cmFsLTEnIH0pXG5cbi8vIEZ1bmN0aW9uIHRvIHVwbG9hZCByZXN1bHRzIHRvIER5bmFtb0RCXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBsb2FkU3BlbmRpbmdTdW1tYXJpZXMoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgZGFpbHlTdW1tYXJpZXM6IERhaWx5U3BlbmRpbmdTdW1tYXJ5W10sXG4gICAgbW9udGhseVN1bW1hcmllczogeyBbbW9udGhZZWFyOiBzdHJpbmddOiBBZ2dyZWdhdGVkU3BlbmRpbmcgfVxuKSB7XG4gICAgLy8gVXBsb2FkIGRhaWx5IHN1bW1hcmllc1xuICAgIGZvciAoY29uc3QgZGFpbHlTdW1tYXJ5IG9mIGRhaWx5U3VtbWFyaWVzKSB7XG4gICAgICAgIGNvbnN0IHBrID0gYCR7dXNlcklkfSNEQUlMWVNVTU1BUllgXG4gICAgICAgIGNvbnN0IHNrID0gYCR7ZGFpbHlTdW1tYXJ5LmRhdGV9YCAvLyBgZGF0ZWAgZm9ybWF0IGlzIGV4cGVjdGVkIGFzIFlZWVktTU0tRERcblxuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IFB1dEl0ZW1Db21tYW5kKHtcbiAgICAgICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSxcbiAgICAgICAgICAgIEl0ZW06IHtcbiAgICAgICAgICAgICAgICBwazogeyBTOiBwayB9LFxuICAgICAgICAgICAgICAgIHNrOiB7IFM6IHNrIH0sXG4gICAgICAgICAgICAgICAgc3BlbmRpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgTTogT2JqZWN0LmVudHJpZXMoZGFpbHlTdW1tYXJ5LnNwZW5kaW5nKS5yZWR1Y2UoKGFjYywgW2NhdGVnb3J5LCBhbW91bnRdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NbY2F0ZWdvcnldID0geyBOOiBhbW91bnQudG9GaXhlZCgyKSB9IC8vIENvbnZlcnQgc3BlbmRpbmcgYW1vdW50cyB0byBzdHJpbmdzIGZvciBEREJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2NcbiAgICAgICAgICAgICAgICAgICAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgeyBOOiBzdHJpbmcgfT4pLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBjbGllbnQuc2VuZChjb21tYW5kKVxuICAgICAgICAgICAgY29uc29sZS5sb2coYFVwbG9hZGVkIGRhaWx5IHN1bW1hcnkgZm9yICR7ZGFpbHlTdW1tYXJ5LmRhdGV9YClcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHVwbG9hZGluZyBkYWlseSBzdW1tYXJ5IGZvciAke2RhaWx5U3VtbWFyeS5kYXRlfTpgLCBlcnJvcilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVwbG9hZCBtb250aGx5IHN1bW1hcmllc1xuICAgIGZvciAoY29uc3QgW21vbnRoWWVhciwgbW9udGhseVN1bW1hcnldIG9mIE9iamVjdC5lbnRyaWVzKG1vbnRobHlTdW1tYXJpZXMpKSB7XG4gICAgICAgIGNvbnN0IHBrID0gYCR7dXNlcklkfSNNT05USExZU1VNTUFSWWBcbiAgICAgICAgY29uc3Qgc2sgPSBgJHttb250aFllYXJ9YCAvLyBGb3JtYXQ6IFlFQVJNT05USCAoZS5nLiwgMjAyNDAxIGZvciBKYW51YXJ5IDIwMjQpXG5cbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBQdXRJdGVtQ29tbWFuZCh7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRBQkxFX05BTUUsXG4gICAgICAgICAgICBJdGVtOiB7XG4gICAgICAgICAgICAgICAgcGs6IHsgUzogcGsgfSxcbiAgICAgICAgICAgICAgICBzazogeyBTOiBzayB9LFxuICAgICAgICAgICAgICAgIHNwZW5kaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgIE06IE9iamVjdC5lbnRyaWVzKG1vbnRobHlTdW1tYXJ5Lm1vbnRobHlfc3BlbmRpbmcpLnJlZHVjZSgoYWNjLCBbY2F0ZWdvcnksIGFtb3VudF0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY1tjYXRlZ29yeV0gPSB7IE46IGFtb3VudC50b0ZpeGVkKDIpIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2NcbiAgICAgICAgICAgICAgICAgICAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgeyBOOiBzdHJpbmcgfT4pLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBjbGllbnQuc2VuZChjb21tYW5kKVxuICAgICAgICAgICAgY29uc29sZS5sb2coYFVwbG9hZGVkIG1vbnRobHkgc3VtbWFyeSBmb3IgJHttb250aFllYXJ9YClcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHVwbG9hZGluZyBtb250aGx5IHN1bW1hcnkgZm9yICR7bW9udGhZZWFyfTpgLCBlcnJvcilcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==