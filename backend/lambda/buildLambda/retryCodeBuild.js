"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.retryCodeBuild = void 0;
const API_1 = require("./API");
const gpt_1 = require("./gpt");
const client_s3_1 = require("@aws-sdk/client-s3");
const stockPrompts_1 = require("./stockPrompts");
const s3 = new client_s3_1.S3Client({ region: process.env.AWS_REGION });
const retryCodeBuild = async (event, context) => {
    const user = event.identity?.username;
    let previousCodeRun = stockPrompts_1.previousCode;
    if (event.arguments.build.s3Key) {
        const bucketName = process.env.S3_BUCKET; // Ensure this environment variable is set
        const s3Key = event.arguments.build.s3Key;
        try {
            const command = new client_s3_1.GetObjectCommand({
                Bucket: bucketName,
                Key: s3Key,
            });
            const s3Response = await s3.send(command);
            if (s3Response.Body) {
                const bodyContents = await s3Response.Body.transformToString(); // Automatically convert to string
                previousCodeRun = bodyContents;
            }
            else {
                throw new Error('File content is empty or invalid.');
            }
        }
        catch (error) {
            console.error('Error fetching S3 file:', error);
            throw new Error('Failed to retrieve S3 file.');
        }
    }
    const message = `${previousCodeRun} Fix the following error ${event.arguments.build.error} Output the updated script as runnable code`;
    const response = await (0, gpt_1.completeChatFromPrompt)(message, API_1.ChatFocus.All, user, false, API_1.ChatType.RetryCodeBuild, []);
    const recommentations = JSON.parse(response || '');
    const newCode = recommentations.newCode;
    const newFileKey = user + '-' + Math.floor(Math.random() * 1000000);
    try {
        // Upload new code to S3
        const putCommand = new client_s3_1.PutObjectCommand({
            Bucket: process.env.S3_BUCKET,
            Key: newFileKey,
            Body: newCode,
            ContentType: 'application/javascript', // Assuming it's JS code
        });
        await s3.send(putCommand);
        console.log(`New code uploaded to S3: ${newFileKey}`);
    }
    catch (error) {
        console.error('Error uploading new code to S3:', error);
        throw new Error('Failed to upload new code to S3.');
    }
    await (0, gpt_1.sendChatToUI)(user, 'FinancialSimulationRepair', JSON.stringify({
        __typename: 'FinancialSimulationRepair',
        s3Key: newFileKey,
    }), true, user + Date.now().toString());
    return {
        __typename: 'FinancialSimulationExpansion',
        s3Key: newFileKey,
    };
};
exports.retryCodeBuild = retryCodeBuild;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV0cnlDb2RlQnVpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmV0cnlDb2RlQnVpbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsK0JBQThGO0FBQzlGLCtCQUFrRztBQUNsRyxrREFBaUY7QUFDakYsaURBQTZDO0FBQzdDLE1BQU0sRUFBRSxHQUFHLElBQUksb0JBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUE7QUFFcEQsTUFBTSxjQUFjLEdBQXFFLEtBQUssRUFDakcsS0FBMkQsRUFDM0QsT0FBZ0IsRUFDbEIsRUFBRTtJQUNBLE1BQU0sSUFBSSxHQUFJLEtBQUssQ0FBQyxRQUFtQyxFQUFFLFFBQVEsQ0FBQTtJQUVqRSxJQUFJLGVBQWUsR0FBRywyQkFBWSxDQUFBO0lBQ2xDLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDOUIsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUEsQ0FBQywwQ0FBMEM7UUFDbkYsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFBO1FBRXpDLElBQUksQ0FBQztZQUNELE1BQU0sT0FBTyxHQUFHLElBQUksNEJBQWdCLENBQUM7Z0JBQ2pDLE1BQU0sRUFBRSxVQUFXO2dCQUNuQixHQUFHLEVBQUUsS0FBSzthQUNiLENBQUMsQ0FBQTtZQUVGLE1BQU0sVUFBVSxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUV6QyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbEIsTUFBTSxZQUFZLEdBQUcsTUFBTSxVQUFVLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUEsQ0FBQyxrQ0FBa0M7Z0JBQ2pHLGVBQWUsR0FBRyxZQUFZLENBQUE7WUFDbEMsQ0FBQztpQkFBTSxDQUFDO2dCQUNKLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQTtZQUN4RCxDQUFDO1FBQ0wsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLHlCQUF5QixFQUFFLEtBQUssQ0FBQyxDQUFBO1lBQy9DLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtRQUNsRCxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sT0FBTyxHQUFHLEdBQUcsZUFBZSw0QkFBNEIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyw2Q0FBNkMsQ0FBQTtJQUN0SSxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUEsNEJBQXNCLEVBQUMsT0FBTyxFQUFFLGVBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxjQUFRLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQy9HLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBeUMsQ0FBQTtJQUMxRixNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFBO0lBQ3ZDLE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUE7SUFFbkUsSUFBSSxDQUFDO1FBQ0Qsd0JBQXdCO1FBQ3hCLE1BQU0sVUFBVSxHQUFHLElBQUksNEJBQWdCLENBQUM7WUFDcEMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUztZQUM3QixHQUFHLEVBQUUsVUFBVTtZQUNmLElBQUksRUFBRSxPQUFPO1lBQ2IsV0FBVyxFQUFFLHdCQUF3QixFQUFFLHdCQUF3QjtTQUNsRSxDQUFDLENBQUE7UUFFRixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsVUFBVSxFQUFFLENBQUMsQ0FBQTtJQUN6RCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDdkQsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFBO0lBQ3ZELENBQUM7SUFDRCxNQUFNLElBQUEsa0JBQVksRUFDZCxJQUFJLEVBQ0osMkJBQTJCLEVBQzNCLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDWCxVQUFVLEVBQUUsMkJBQTJCO1FBQ3ZDLEtBQUssRUFBRSxVQUFVO0tBQ3BCLENBQUMsRUFDRixJQUFJLEVBQ0osSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FDL0IsQ0FBQTtJQUNELE9BQU87UUFDSCxVQUFVLEVBQUUsOEJBQThCO1FBQzFDLEtBQUssRUFBRSxVQUFVO0tBQ3BCLENBQUE7QUFDTCxDQUFDLENBQUE7QUFuRVksUUFBQSxjQUFjLGtCQW1FMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBTeW5jSWRlbnRpdHlDb2duaXRvLCBBcHBTeW5jUmVzb2x2ZXJFdmVudCwgQXBwU3luY1Jlc29sdmVySGFuZGxlciwgQ29udGV4dCB9IGZyb20gJ2F3cy1sYW1iZGEnXG5pbXBvcnQgeyBDaGF0Rm9jdXMsIENoYXRUeXBlLCBGaW5hbmNpYWxTaW11bGF0aW9uRXhwYW5zaW9uLCBSZXRyeUNvZGVCdWlsZElucHV0IH0gZnJvbSAnLi9BUEknXG5pbXBvcnQgeyBjb21wbGV0ZUNoYXRGcm9tUHJvbXB0LCBzZW5kQ2hhdFRvVUksIFNpbXVsYXRpb25FeHBhbnNpb25SZXNwb25zZUludGVyZmFjZSB9IGZyb20gJy4vZ3B0J1xuaW1wb3J0IHsgUzNDbGllbnQsIEdldE9iamVjdENvbW1hbmQsIFB1dE9iamVjdENvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnXG5pbXBvcnQgeyBwcmV2aW91c0NvZGUgfSBmcm9tICcuL3N0b2NrUHJvbXB0cydcbmNvbnN0IHMzID0gbmV3IFMzQ2xpZW50KHsgcmVnaW9uOiBwcm9jZXNzLmVudi5BV1NfUkVHSU9OIH0pXG5cbmV4cG9ydCBjb25zdCByZXRyeUNvZGVCdWlsZDogQXBwU3luY1Jlc29sdmVySGFuZGxlcjxhbnksIEZpbmFuY2lhbFNpbXVsYXRpb25FeHBhbnNpb24gfCB2b2lkPiA9IGFzeW5jIChcbiAgICBldmVudDogQXBwU3luY1Jlc29sdmVyRXZlbnQ8eyBidWlsZDogUmV0cnlDb2RlQnVpbGRJbnB1dCB9PixcbiAgICBjb250ZXh0OiBDb250ZXh0XG4pID0+IHtcbiAgICBjb25zdCB1c2VyID0gKGV2ZW50LmlkZW50aXR5IGFzIEFwcFN5bmNJZGVudGl0eUNvZ25pdG8pPy51c2VybmFtZVxuXG4gICAgbGV0IHByZXZpb3VzQ29kZVJ1biA9IHByZXZpb3VzQ29kZVxuICAgIGlmIChldmVudC5hcmd1bWVudHMuYnVpbGQuczNLZXkpIHtcbiAgICAgICAgY29uc3QgYnVja2V0TmFtZSA9IHByb2Nlc3MuZW52LlMzX0JVQ0tFVCAvLyBFbnN1cmUgdGhpcyBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBzZXRcbiAgICAgICAgY29uc3QgczNLZXkgPSBldmVudC5hcmd1bWVudHMuYnVpbGQuczNLZXlcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBHZXRPYmplY3RDb21tYW5kKHtcbiAgICAgICAgICAgICAgICBCdWNrZXQ6IGJ1Y2tldE5hbWUhLFxuICAgICAgICAgICAgICAgIEtleTogczNLZXksXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBjb25zdCBzM1Jlc3BvbnNlID0gYXdhaXQgczMuc2VuZChjb21tYW5kKVxuXG4gICAgICAgICAgICBpZiAoczNSZXNwb25zZS5Cb2R5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9keUNvbnRlbnRzID0gYXdhaXQgczNSZXNwb25zZS5Cb2R5LnRyYW5zZm9ybVRvU3RyaW5nKCkgLy8gQXV0b21hdGljYWxseSBjb252ZXJ0IHRvIHN0cmluZ1xuICAgICAgICAgICAgICAgIHByZXZpb3VzQ29kZVJ1biA9IGJvZHlDb250ZW50c1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpbGUgY29udGVudCBpcyBlbXB0eSBvciBpbnZhbGlkLicpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBTMyBmaWxlOicsIGVycm9yKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmV0cmlldmUgUzMgZmlsZS4nKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbWVzc2FnZSA9IGAke3ByZXZpb3VzQ29kZVJ1bn0gRml4IHRoZSBmb2xsb3dpbmcgZXJyb3IgJHtldmVudC5hcmd1bWVudHMuYnVpbGQuZXJyb3J9IE91dHB1dCB0aGUgdXBkYXRlZCBzY3JpcHQgYXMgcnVubmFibGUgY29kZWBcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNvbXBsZXRlQ2hhdEZyb21Qcm9tcHQobWVzc2FnZSwgQ2hhdEZvY3VzLkFsbCwgdXNlciwgZmFsc2UsIENoYXRUeXBlLlJldHJ5Q29kZUJ1aWxkLCBbXSlcbiAgICBjb25zdCByZWNvbW1lbnRhdGlvbnMgPSBKU09OLnBhcnNlKHJlc3BvbnNlIHx8ICcnKSBhcyBTaW11bGF0aW9uRXhwYW5zaW9uUmVzcG9uc2VJbnRlcmZhY2VcbiAgICBjb25zdCBuZXdDb2RlID0gcmVjb21tZW50YXRpb25zLm5ld0NvZGVcbiAgICBjb25zdCBuZXdGaWxlS2V5ID0gdXNlciArICctJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApXG5cbiAgICB0cnkge1xuICAgICAgICAvLyBVcGxvYWQgbmV3IGNvZGUgdG8gUzNcbiAgICAgICAgY29uc3QgcHV0Q29tbWFuZCA9IG5ldyBQdXRPYmplY3RDb21tYW5kKHtcbiAgICAgICAgICAgIEJ1Y2tldDogcHJvY2Vzcy5lbnYuUzNfQlVDS0VULFxuICAgICAgICAgICAgS2V5OiBuZXdGaWxlS2V5LFxuICAgICAgICAgICAgQm9keTogbmV3Q29kZSxcbiAgICAgICAgICAgIENvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vamF2YXNjcmlwdCcsIC8vIEFzc3VtaW5nIGl0J3MgSlMgY29kZVxuICAgICAgICB9KVxuXG4gICAgICAgIGF3YWl0IHMzLnNlbmQocHV0Q29tbWFuZClcblxuICAgICAgICBjb25zb2xlLmxvZyhgTmV3IGNvZGUgdXBsb2FkZWQgdG8gUzM6ICR7bmV3RmlsZUtleX1gKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwbG9hZGluZyBuZXcgY29kZSB0byBTMzonLCBlcnJvcilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gdXBsb2FkIG5ldyBjb2RlIHRvIFMzLicpXG4gICAgfVxuICAgIGF3YWl0IHNlbmRDaGF0VG9VSShcbiAgICAgICAgdXNlcixcbiAgICAgICAgJ0ZpbmFuY2lhbFNpbXVsYXRpb25SZXBhaXInLFxuICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBfX3R5cGVuYW1lOiAnRmluYW5jaWFsU2ltdWxhdGlvblJlcGFpcicsXG4gICAgICAgICAgICBzM0tleTogbmV3RmlsZUtleSxcbiAgICAgICAgfSksXG4gICAgICAgIHRydWUsXG4gICAgICAgIHVzZXIgKyBEYXRlLm5vdygpLnRvU3RyaW5nKClcbiAgICApXG4gICAgcmV0dXJuIHtcbiAgICAgICAgX190eXBlbmFtZTogJ0ZpbmFuY2lhbFNpbXVsYXRpb25FeHBhbnNpb24nLFxuICAgICAgICBzM0tleTogbmV3RmlsZUtleSxcbiAgICB9XG59XG4iXX0=