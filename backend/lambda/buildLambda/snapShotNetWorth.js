"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetWorth = exports.reduceAccounts = exports.getAccountBalanceMultipler = exports.snapShotNetWorth = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const Entities_1 = require("./queries/Entities");
const Encryption_1 = require("./queries/Encryption");
const Item_1 = require("./mappers/Item");
const Security_1 = require("./mappers/Security");
const Accounts_1 = require("./mappers/Accounts");
const client = new client_dynamodb_1.DynamoDBClient({ region: 'ca-central-1' });
function getEarliestFirstOfMonthWithin90Days(createdAt) {
    return new Date(new Date().getTime() - 1000 * 3600 * 24 * 365);
}
const snapShotNetWorth = async () => {
    // TODO: Add logic to handle last calculated complete month and start from then
    const items = (await (0, Encryption_1.decryptItemsInBatches)((await client.send((0, Entities_1.GetItems)()))?.Items ?? [])).map(Item_1.mapDdbResponseToItem);
    /** TODO: Just add created at to the item? */
    const encryptedUserItemRecord = await Promise.all(items.map(async (el) => await client.send((0, Entities_1.GetUser)(el.sk || ''))));
    const decryptedUserItemRecord = (await (0, Encryption_1.decryptItemsInBatches)(encryptedUserItemRecord.flatMap((output) => output.Items ?? [])))
        .map(Item_1.mapDdbResponseToItem)
        .filter((item) => {
        console.info('Processing', item);
        return item.pk && item.created_at;
    });
    /** Go through users and aggregate transactions */
    await processUsersInBatches(decryptedUserItemRecord);
};
exports.snapShotNetWorth = snapShotNetWorth;
function chunkArray(array, chunkSize) {
    const chunks = [];
    for (let i = 0; i < array.length; i += chunkSize) {
        chunks.push(array.slice(i, i + chunkSize));
    }
    return chunks;
}
async function processUsersInBatches(decryptedUserItemRecord) {
    const userBatches = chunkArray(decryptedUserItemRecord, 100);
    const now = new Date(); // Get the current date and time
    for (const batch of userBatches) {
        await Promise.all(batch.map(async (item) => {
            const startDay = getEarliestFirstOfMonthWithin90Days(new Date(item?.created_at ?? 0));
            console.info(startDay);
            const encryptedTransactions = await client.send((0, Entities_1.GetEntities)({
                pk: item.pk ?? '',
                dateRange: {
                    hasNoTimeConstraint: true,
                },
                username: '',
                id: '',
                entityName: 'SECURITY',
            }));
            const decrypedSecurities = await (0, Security_1.mapSecuritiesToJoinedData)(await (0, Encryption_1.decryptItemsInBatches)(encryptedTransactions.Items ?? []));
            const encryptedAccounts = await client.send((0, Entities_1.GetEntities)({
                pk: item.pk ?? '',
                dateRange: {
                    hasNoTimeConstraint: true,
                },
                username: '',
                id: '',
                entityName: 'ACCOUNT',
            }));
            const decrypedAccounts = encryptedAccounts.Items?.map(Accounts_1.mapDynamoDBToAccount) ?? [];
            const netWorth = (0, exports.reduceAccounts)(decrypedAccounts);
            const securitySnapshot = Object.values(decrypedSecurities);
            const securityNetWorth = (0, exports.getNetWorth)(securitySnapshot);
            const tfsaNetWorth = (0, exports.reduceAccounts)(decrypedAccounts.filter((acc) => checkAccountNameOrTypes(['tfsa'], acc)));
            const rrspNetWorth = (0, exports.reduceAccounts)(decrypedAccounts.filter((acc) => checkAccountNameOrTypes(['rrsp', 'drsp'], acc)));
            const fhsaNetWorth = (0, exports.reduceAccounts)(decrypedAccounts.filter((acc) => checkAccountNameOrTypes(['fhsa'], acc)));
            const command = new client_dynamodb_1.PutItemCommand({
                TableName: process.env.TABLE_NAME,
                Item: {
                    pk: { S: item.pk ? item.pk + '#NETWORTHDAILYSNAPSHOT' : '' },
                    sk: { S: new Date().toDateString() },
                    netWorth: { N: netWorth.toFixed(2) },
                    tfsaNetWorth: { N: tfsaNetWorth.toFixed(2) },
                    rrspNetWorth: { N: rrspNetWorth.toFixed(2) },
                    fhsaNetWorth: { N: fhsaNetWorth.toFixed(2) },
                    securityNetWorth: { N: securityNetWorth.toFixed(2) },
                },
            });
            return client.send(command);
        }));
    }
}
const checkAccountNameOrTypes = (types, acc) => {
    return types
        .map((type) => {
        return acc.name?.toLowerCase()?.includes(type) || acc.type?.toLowerCase().includes(type);
    })
        .includes(true);
};
const getAccountBalanceMultipler = (acc) => (acc.type === 'loan' || acc.type === 'credit' ? -1 : 1);
exports.getAccountBalanceMultipler = getAccountBalanceMultipler;
const reduceAccounts = (accs) => accs.reduce((val, acc) => val + (0, exports.getAccountBalanceMultipler)(acc) * parseFloat(acc.balances?.current || '0'), 0);
exports.reduceAccounts = reduceAccounts;
const getNetWorth = (holdings) => {
    return holdings.reduce((val, holding) => {
        return val + (holding.holding.quantity ?? 0) * (holding.security?.close_price ?? 0);
    }, 0);
};
exports.getNetWorth = getNetWorth;
//# sourceMappingURL=data:application/json;base64,