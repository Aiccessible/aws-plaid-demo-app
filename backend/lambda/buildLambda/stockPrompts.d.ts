declare const newsPrompt = "\nProvide a weekly synopsis of what events of concern are coming up for the requested stock. Keep it under 600 characters non-technical purely news related, how macro trends will effect it, etc...\n";
declare const technicalPrompt = "Provide a technical analysis of the stock, using technical indicators and patterns to predict future price movements, less than 600 characters.\n\nB. Research Capabilities:\n\n1. Real-Time Data Access and Analysis: Utilize search functionalities to access up-to-date financial data, news, and market trends. Integrate this real-time information into your stock analyses for timely and relevant insights.\n2. Sector-Specific Analysis: Provide detailed analysis within specific industries or sectors, using knowledge from specialized courses in MFE programs. Understand industry-specific risks, trends, and opportunities.\n3. Global Market Perspective: Maintain a global perspective in analysis, considering international markets, exchange rates, geopolitical factors, and global economic trends.\n\nC. Communication and Reporting:\n\n1. Detailed Reporting: Produce comprehensive reports that combine quantitative and qualitative analyses. Your communication should be clear, precise, and accessible to both professional investors and informed laypersons.\n2. Customized Advice: Tailor your analysis and recommendations to individual user's risk profiles, investment goals, and preferences, as a CFP might do.\n3. Ethical Considerations: Always maintain an unbiased perspective and disclose any potential conflicts of interest in your analyses.\n";
declare const expansionPrompt = "You are able to do personal financial projections using your vast knoweldge on building accurate simulations. You add to and return a function simulate_account_balances(body) , keeping all the current logic but also adding new logic \n";
declare const previousCode = "\nfrom typing import Dict, List\n\ndef simulate_account_balances(body) -> Dict[str, List[float]]:\n    # Initialize account balances\n    initial_salary = body.get(\"initial_salary\")\n    salary_growth = body.get(\"salary_growth\")\n    initial_bonus = body.get(\"initial_bonus\")\n    bonus_growth = body.get(\"bonus_growth\")\n    initial_expenses = body.get(\"initial_expenses\")\n    expenses_growth = body.get(\"expenses_growth\")\n    investment_yield = body.get(\"investment_yield\")\n    tax_rate = body.get(\"tax_rate\")\n    years = body.get(\"years\")\n    initial_rrsp_balance = body.get(\"initial_rrsp_balance\")\n    initial_fhsa_balance = body.get(\"initial_fhsa_balance\")\n    initial_tfsa_balance = body.get(\"initial_tfsa_balance\")\n    initial_brokerage_balance = body.get(\"initial_brokerage_balance\")\n    initial_rrsp_room = body.get(\"initial_rrsp_room\")\n    initial_fhsa_room = body.get(\"initial_fhsa_room\")\n    initial_tfsa_room = body.get(\"initial_tfsa_room\")\n    rrsp_balance = initial_rrsp_balance\n    fhsa_balance = initial_fhsa_balance\n    tfsa_balance = initial_tfsa_balance\n    brokerage_balance = initial_brokerage_balance\n\n    rrsp_room = initial_rrsp_room\n    fhsa_room = initial_fhsa_room\n    tfsa_room = initial_tfsa_room\n\n    salary = initial_salary\n    bonus = initial_bonus\n    expenses = initial_expenses\n\n    # Lists to store balances for each year\n    rrsp_balances = []\n    fhsa_balances = []\n    tfsa_balances = []\n    brokerage_balances = []\n    net_worths = []\n\n    # Year 0\n    from datetime import date\n\n    d0 = date(2024, 1, 1)\n    d1 = date.today()\n    delta = d1 - d0\n    delta_fraction = delta.days / 365.25\n    print(delta_fraction)\n\n    cash = (salary - expenses) * delta_fraction + bonus\n\n    # Update contributions based on salary and bonus (example logic)\n    rrsp_contribution = min(cash, rrsp_room)  # Example RRSP contribution limit\n    rrsp_room = max(0, rrsp_room - rrsp_contribution)\n    rrsp_balance += rrsp_contribution\n\n    # Income Tax Applied After RRSP\n    cash = max(0, cash - rrsp_contribution) * (1 - tax_rate)\n\n    fhsa_contribution = min(cash, fhsa_room)  # Example FHSA contribution limit\n    fhsa_room = max(0, fhsa_room - fhsa_contribution)\n    fhsa_balance += fhsa_contribution\n    cash = max(0, cash - fhsa_contribution)\n\n    tfsa_contribution = min(cash, tfsa_room)  # Example TFSA contribution limit\n    tfsa_room = max(0, tfsa_room - tfsa_contribution)\n    tfsa_balance += tfsa_contribution\n    cash = max(0, cash - tfsa_contribution)\n\n    brokerage_contribution = max(0, cash)  # Remaining funds\n    brokerage_balance += brokerage_contribution\n    cash = max(0, cash - brokerage_contribution)\n\n    for year in range(years):\n        try:\n            # Log the balances for the year\n\n            # New room\n            rrsp_room += min((salary + bonus) * 0.18, 30000)\n            fhsa_room += 8000\n            tfsa_room += 6000\n\n            # Apply investment yield\n            rrsp_balance *= 1 + investment_yield\n            fhsa_balance *= 1 + investment_yield\n            tfsa_balance *= 1 + investment_yield\n            brokerage_balance *= 1 + investment_yield\n\n            # Make end of year contributions based on salary and bonus (example logic)\n\n            cash = (salary - expenses) * delta_fraction + bonus\n\n            rrsp_contribution = min(cash, rrsp_room)  # Example RRSP contribution limit\n            rrsp_room = max(0, rrsp_room - rrsp_contribution)\n            rrsp_balance += rrsp_contribution\n            cash = max(0, cash - rrsp_contribution)\n\n            fhsa_contribution = min(cash, fhsa_room)  # Example FHSA contribution limit\n            fhsa_room = max(0, fhsa_room - fhsa_contribution)\n            fhsa_balance += fhsa_contribution\n            cash = max(0, cash - fhsa_contribution)\n\n            tfsa_contribution = min(cash, tfsa_room)  # Example TFSA contribution limit\n            tfsa_room = max(0, tfsa_room - tfsa_contribution)\n            tfsa_balance += tfsa_contribution\n            cash = max(0, cash - tfsa_contribution)\n\n            brokerage_contribution = max(0, cash)  # Remaining funds\n            brokerage_balance += brokerage_contribution\n            cash = max(0, cash - brokerage_contribution)\n\n            # Update salary, bonus, and expenses for the next year\n            salary *= 1 + salary_growth\n            bonus *= 1 + bonus_growth\n            expenses *= 1 + expenses_growth\n\n            # Store balances for the year\n            rrsp_balances.append(rrsp_balance)\n            fhsa_balances.append(fhsa_balance)\n            tfsa_balances.append(tfsa_balance)\n            brokerage_balances.append(brokerage_balance)\n            net_worths.append(\n                sum(\n                    [\n                        rrsp_balance,  # - (rrsp_balance - initial_rrsp_balance) * tax_rate,\n                        fhsa_balance,\n                        tfsa_balance,\n                        brokerage_balance,\n                        # - (brokerage_balance - initial_brokerage_balance) * tax_rate,\n                    ]\n                )\n            )\n\n        except Exception as e:\n            raise\n\n    return {\n        \"RRSP\": rrsp_balances,\n        \"FHSA\": fhsa_balances,\n        \"TFSA\": tfsa_balances,\n        \"Brokerage\": brokerage_balances,\n        \"Net Worth\": net_worths,\n    }";
export { newsPrompt, technicalPrompt, expansionPrompt, previousCode };
