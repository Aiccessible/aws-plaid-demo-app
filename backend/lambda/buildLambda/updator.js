"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUserIdAndItemId = parseUserIdAndItemId;
exports.updator = updator;
const client_sqs_1 = require("@aws-sdk/client-sqs");
const Encryption_1 = require("./queries/Encryption");
const Entities_1 = require("./queries/Entities");
const Item_1 = require("./mappers/Item");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
console.info('QUEUE URL', process.env.WEBHOOK_URL);
// Initialize the SQS client
const sqsClient = new client_sqs_1.SQSClient({ region: 'ca-central-1' }); // Replace 'your-region' with your actual AWS region
const client = new client_dynamodb_1.DynamoDBClient({ region: 'ca-central-1' });
function parseUserIdAndItemId(input) {
    const regex = /^USER#([^#]+)#ITEM#([^#]+)$/;
    const match = input.match(regex);
    if (!match) {
        console.error("Invalid format. Expected 'USER#<userId>#ITEM#<itemId>'.");
        return null;
    }
    const [, userId, itemId] = match;
    return { userId, itemId };
}
// Function to send a message to SQS
async function updator() {
    const items = (await (0, Encryption_1.decryptItemsInBatches)((await client.send((0, Entities_1.GetItems)()))?.Items ?? [])).map(Item_1.mapDdbResponseToItem);
    /** TODO: Just add created at to the item? */
    const encryptedUserItemRecord = await Promise.all(items.map(async (el) => await client.send((0, Entities_1.GetUser)(el.sk || ''))));
    const decryptedUserItemRecord = (await (0, Encryption_1.decryptItemsInBatches)(encryptedUserItemRecord.flatMap((output) => output.Items ?? [])))
        .map(Item_1.mapDdbResponseToItem)
        .filter((item) => {
        console.info('Processing', item);
        return item.pk && item.created_at;
    });
    const promises = decryptedUserItemRecord.flatMap(async (userItem) => {
        const { userId, itemId } = parseUserIdAndItemId(userItem.pk ?? '') ?? {};
        if (!userId || !itemId) {
            console.error('Could not parse', userItem.pk);
            return [];
        }
        const params = [
            {
                QueueUrl: process.env.WEBHOOK_URL,
                DelaySeconds: 0,
                MessageAttributes: {
                    WebhookType: {
                        DataType: 'String',
                        StringValue: 'BALANCE',
                    },
                    WebhookCode: {
                        DataType: 'String',
                        StringValue: 'DEFAULT_UPDATE',
                    },
                    ItemId: {
                        DataType: 'String',
                        StringValue: itemId,
                    },
                    UserId: {
                        DataType: 'String',
                        StringValue: userId,
                    },
                },
                MessageBody: '{}', // Empty JSON body
                MessageDeduplicationId: `${userId}BALANCE_DEFAULT_UPDATE${itemId}`,
                MessageGroupId: itemId,
            },
            {
                QueueUrl: process.env.WEBHOOK_URL,
                DelaySeconds: 0,
                MessageAttributes: {
                    WebhookType: {
                        DataType: 'String',
                        StringValue: 'HOLDINGS',
                    },
                    WebhookCode: {
                        DataType: 'String',
                        StringValue: 'DEFAULT_UPDATE',
                    },
                    ItemId: {
                        DataType: 'String',
                        StringValue: itemId,
                    },
                    UserId: {
                        DataType: 'String',
                        StringValue: userId,
                    },
                },
                MessageBody: '{}', // Empty JSON body
                MessageDeduplicationId: `${userId}HOLDINGS_DEFAULT_UPDATE${itemId}`,
                MessageGroupId: itemId,
            },
        ];
        console.debug('Sending message to SQS:', params);
        try {
            const responses = params.map(async (param) => {
                const command = new client_sqs_1.SendMessageCommand(param);
                const response = await sqsClient.send(command);
                console.log('Message sent successfully:', response);
            });
            return await Promise.all(responses);
        }
        catch (error) {
            console.error('Failed to send message to SQS:', error);
        }
        return [];
    });
    console.info(promises, 'waiting for');
    await Promise.all(promises);
}
//# sourceMappingURL=data:application/json;base64,