"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadSpendingSummaries = uploadSpendingSummaries;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
// Define DynamoDB client
const client = new client_dynamodb_1.DynamoDBClient({ region: 'ca-central-1' });
// Function to upload results to DynamoDB
async function uploadSpendingSummaries(userId, dailySummaries, monthlySummaries) {
    // Upload daily summaries
    for (const dailySummary of dailySummaries) {
        const pk = `${userId}#DAILYSUMMARY`;
        const sk = `${dailySummary.date}`; // `date` format is expected as YYYY-MM-DD
        const command = new client_dynamodb_1.PutItemCommand({
            TableName: process.env.TABLE_NAME,
            Item: {
                pk: { S: pk },
                sk: { S: sk },
                spending: {
                    M: Object.entries(dailySummary.spending).reduce((acc, [category, amount]) => {
                        acc[category] = { N: amount.toFixed(2) }; // Convert spending amounts to strings for DDB
                        return acc;
                    }, {}),
                },
                date: { N: new Date(sk).getTime().toString() },
            },
        });
        try {
            await client.send(command);
            console.log(`Uploaded daily summary for ${dailySummary.date}`);
        }
        catch (error) {
            console.error(`Error uploading daily summary for ${dailySummary.date}:`, error);
        }
    }
    // Upload monthly summaries
    for (const [monthYear, monthlySummary] of Object.entries(monthlySummaries)) {
        const pk = `${userId}#MONTHLYSUMMARY`;
        const sk = `${monthYear}`; // Format: YEARMONTH (e.g., 202401 for January 2024)
        const command = new client_dynamodb_1.PutItemCommand({
            TableName: process.env.TABLE_NAME,
            Item: {
                pk: { S: pk },
                sk: { S: sk },
                spending: {
                    M: Object.entries(monthlySummary.monthly_spending).reduce((acc, [category, amount]) => {
                        acc[category] = { N: amount.toFixed(2) };
                        return acc;
                    }, {}),
                },
                date: { N: new Date(sk + '-01').getTime().toString() },
            },
        });
        try {
            await client.send(command);
            console.log(`Uploaded monthly summary for ${monthYear}`);
        }
        catch (error) {
            console.error(`Error uploading monthly summary for ${monthYear}:`, error);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3VtbWFyaWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3F1ZXJpZXMvU3VtbWFyaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBT0EsMERBNERDO0FBbkVELDhEQUF5RTtBQUd6RSx5QkFBeUI7QUFDekIsTUFBTSxNQUFNLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUE7QUFFN0QseUNBQXlDO0FBQ2xDLEtBQUssVUFBVSx1QkFBdUIsQ0FDekMsTUFBYyxFQUNkLGNBQXNDLEVBQ3RDLGdCQUE2RDtJQUU3RCx5QkFBeUI7SUFDekIsS0FBSyxNQUFNLFlBQVksSUFBSSxjQUFjLEVBQUUsQ0FBQztRQUN4QyxNQUFNLEVBQUUsR0FBRyxHQUFHLE1BQU0sZUFBZSxDQUFBO1FBQ25DLE1BQU0sRUFBRSxHQUFHLEdBQUcsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFBLENBQUMsMENBQTBDO1FBRTVFLE1BQU0sT0FBTyxHQUFHLElBQUksZ0NBQWMsQ0FBQztZQUMvQixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVO1lBQ2pDLElBQUksRUFBRTtnQkFDRixFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO2dCQUNiLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7Z0JBQ2IsUUFBUSxFQUFFO29CQUNOLENBQUMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRTt3QkFDeEUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFDLDhDQUE4Qzt3QkFDdkYsT0FBTyxHQUFHLENBQUE7b0JBQ2QsQ0FBQyxFQUFFLEVBQW1DLENBQUM7aUJBQzFDO2dCQUNELElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRTthQUNqRDtTQUNKLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQztZQUNELE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUNsRSxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMscUNBQXFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNuRixDQUFDO0lBQ0wsQ0FBQztJQUVELDJCQUEyQjtJQUMzQixLQUFLLE1BQU0sQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7UUFDekUsTUFBTSxFQUFFLEdBQUcsR0FBRyxNQUFNLGlCQUFpQixDQUFBO1FBQ3JDLE1BQU0sRUFBRSxHQUFHLEdBQUcsU0FBUyxFQUFFLENBQUEsQ0FBQyxvREFBb0Q7UUFFOUUsTUFBTSxPQUFPLEdBQUcsSUFBSSxnQ0FBYyxDQUFDO1lBQy9CLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVU7WUFDakMsSUFBSSxFQUFFO2dCQUNGLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7Z0JBQ2IsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtnQkFDYixRQUFRLEVBQUU7b0JBQ04sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUU7d0JBQ2xGLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7d0JBQ3hDLE9BQU8sR0FBRyxDQUFBO29CQUNkLENBQUMsRUFBRSxFQUFtQyxDQUFDO2lCQUMxQztnQkFDRCxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFO2FBQ3pEO1NBQ0osQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDO1lBQ0QsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLFNBQVMsRUFBRSxDQUFDLENBQUE7UUFDNUQsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxTQUFTLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUM3RSxDQUFDO0lBQ0wsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQkNsaWVudCwgUHV0SXRlbUNvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtZHluYW1vZGInXG5pbXBvcnQgeyBBZ2dyZWdhdGVkU3BlbmRpbmcsIERhaWx5U3BlbmRpbmdTdW1tYXJ5IH0gZnJvbSAnLi4vY2FsY3VsYXRlSW5jb21lQW5kU3BlbmRpbmcnXG5cbi8vIERlZmluZSBEeW5hbW9EQiBjbGllbnRcbmNvbnN0IGNsaWVudCA9IG5ldyBEeW5hbW9EQkNsaWVudCh7IHJlZ2lvbjogJ2NhLWNlbnRyYWwtMScgfSlcblxuLy8gRnVuY3Rpb24gdG8gdXBsb2FkIHJlc3VsdHMgdG8gRHluYW1vREJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGxvYWRTcGVuZGluZ1N1bW1hcmllcyhcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBkYWlseVN1bW1hcmllczogRGFpbHlTcGVuZGluZ1N1bW1hcnlbXSxcbiAgICBtb250aGx5U3VtbWFyaWVzOiB7IFttb250aFllYXI6IHN0cmluZ106IEFnZ3JlZ2F0ZWRTcGVuZGluZyB9XG4pIHtcbiAgICAvLyBVcGxvYWQgZGFpbHkgc3VtbWFyaWVzXG4gICAgZm9yIChjb25zdCBkYWlseVN1bW1hcnkgb2YgZGFpbHlTdW1tYXJpZXMpIHtcbiAgICAgICAgY29uc3QgcGsgPSBgJHt1c2VySWR9I0RBSUxZU1VNTUFSWWBcbiAgICAgICAgY29uc3Qgc2sgPSBgJHtkYWlseVN1bW1hcnkuZGF0ZX1gIC8vIGBkYXRlYCBmb3JtYXQgaXMgZXhwZWN0ZWQgYXMgWVlZWS1NTS1ERFxuXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgUHV0SXRlbUNvbW1hbmQoe1xuICAgICAgICAgICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5UQUJMRV9OQU1FLFxuICAgICAgICAgICAgSXRlbToge1xuICAgICAgICAgICAgICAgIHBrOiB7IFM6IHBrIH0sXG4gICAgICAgICAgICAgICAgc2s6IHsgUzogc2sgfSxcbiAgICAgICAgICAgICAgICBzcGVuZGluZzoge1xuICAgICAgICAgICAgICAgICAgICBNOiBPYmplY3QuZW50cmllcyhkYWlseVN1bW1hcnkuc3BlbmRpbmcpLnJlZHVjZSgoYWNjLCBbY2F0ZWdvcnksIGFtb3VudF0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY1tjYXRlZ29yeV0gPSB7IE46IGFtb3VudC50b0ZpeGVkKDIpIH0gLy8gQ29udmVydCBzcGVuZGluZyBhbW91bnRzIHRvIHN0cmluZ3MgZm9yIEREQlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgICAgICAgICAgICAgICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCB7IE46IHN0cmluZyB9PiksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXRlOiB7IE46IG5ldyBEYXRlKHNrKS5nZXRUaW1lKCkudG9TdHJpbmcoKSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSlcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgY2xpZW50LnNlbmQoY29tbWFuZClcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVcGxvYWRlZCBkYWlseSBzdW1tYXJ5IGZvciAke2RhaWx5U3VtbWFyeS5kYXRlfWApXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciB1cGxvYWRpbmcgZGFpbHkgc3VtbWFyeSBmb3IgJHtkYWlseVN1bW1hcnkuZGF0ZX06YCwgZXJyb3IpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVcGxvYWQgbW9udGhseSBzdW1tYXJpZXNcbiAgICBmb3IgKGNvbnN0IFttb250aFllYXIsIG1vbnRobHlTdW1tYXJ5XSBvZiBPYmplY3QuZW50cmllcyhtb250aGx5U3VtbWFyaWVzKSkge1xuICAgICAgICBjb25zdCBwayA9IGAke3VzZXJJZH0jTU9OVEhMWVNVTU1BUllgXG4gICAgICAgIGNvbnN0IHNrID0gYCR7bW9udGhZZWFyfWAgLy8gRm9ybWF0OiBZRUFSTU9OVEggKGUuZy4sIDIwMjQwMSBmb3IgSmFudWFyeSAyMDI0KVxuXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgUHV0SXRlbUNvbW1hbmQoe1xuICAgICAgICAgICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5UQUJMRV9OQU1FLFxuICAgICAgICAgICAgSXRlbToge1xuICAgICAgICAgICAgICAgIHBrOiB7IFM6IHBrIH0sXG4gICAgICAgICAgICAgICAgc2s6IHsgUzogc2sgfSxcbiAgICAgICAgICAgICAgICBzcGVuZGluZzoge1xuICAgICAgICAgICAgICAgICAgICBNOiBPYmplY3QuZW50cmllcyhtb250aGx5U3VtbWFyeS5tb250aGx5X3NwZW5kaW5nKS5yZWR1Y2UoKGFjYywgW2NhdGVnb3J5LCBhbW91bnRdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NbY2F0ZWdvcnldID0geyBOOiBhbW91bnQudG9GaXhlZCgyKSB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjXG4gICAgICAgICAgICAgICAgICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIHsgTjogc3RyaW5nIH0+KSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRhdGU6IHsgTjogbmV3IERhdGUoc2sgKyAnLTAxJykuZ2V0VGltZSgpLnRvU3RyaW5nKCkgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGNsaWVudC5zZW5kKGNvbW1hbmQpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgVXBsb2FkZWQgbW9udGhseSBzdW1tYXJ5IGZvciAke21vbnRoWWVhcn1gKVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgdXBsb2FkaW5nIG1vbnRobHkgc3VtbWFyeSBmb3IgJHttb250aFllYXJ9OmAsIGVycm9yKVxuICAgICAgICB9XG4gICAgfVxufVxuIl19