"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetWorth = exports.reduceAccounts = exports.getAccountBalanceMultipler = exports.snapShotNetWorth = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const Entities_1 = require("./queries/Entities");
const Encryption_1 = require("./queries/Encryption");
const Item_1 = require("./mappers/Item");
const Security_1 = require("./mappers/Security");
const Accounts_1 = require("./mappers/Accounts");
const client = new client_dynamodb_1.DynamoDBClient({ region: 'ca-central-1' });
function getEarliestFirstOfMonthWithin90Days(createdAt) {
    return new Date(new Date().getTime() - 1000 * 3600 * 24 * 365);
}
const snapShotNetWorth = async () => {
    // TODO: Add logic to handle last calculated complete month and start from then
    const items = (await (0, Encryption_1.decryptItemsInBatches)((await client.send((0, Entities_1.GetItems)()))?.Items ?? [])).map(Item_1.mapDdbResponseToItem);
    /** TODO: Just add created at to the item? */
    const encryptedUserItemRecord = await Promise.all(items.map(async (el) => await client.send((0, Entities_1.GetUser)(el.sk || ''))));
    const decryptedUserItemRecord = (await (0, Encryption_1.decryptItemsInBatches)(encryptedUserItemRecord.flatMap((output) => output.Items ?? [])))
        .map(Item_1.mapDdbResponseToItem)
        .filter((item) => {
        console.info('Processing', item);
        return item.pk && item.created_at;
    });
    /** Go through users and aggregate transactions */
    await processUsersInBatches(decryptedUserItemRecord);
};
exports.snapShotNetWorth = snapShotNetWorth;
function chunkArray(array, chunkSize) {
    const chunks = [];
    for (let i = 0; i < array.length; i += chunkSize) {
        chunks.push(array.slice(i, i + chunkSize));
    }
    return chunks;
}
async function processUsersInBatches(decryptedUserItemRecord) {
    const recordsWithGroupKey = decryptedUserItemRecord.map((el) => ({
        ...el,
        groupKey: el.pk?.replace(/#ITEM#\w+/, ''),
    }));
    const groupedByGroupKey = recordsWithGroupKey.reduce((acc, item) => {
        const key = item.groupKey || 'undefined';
        if (!acc[key]) {
            acc[key] = [];
        }
        acc[key].push(item);
        return acc;
    }, {});
    // Step 3: Get an array of groups (each group is an array of items with the same groupKey)
    const groupedArrays = Object.values(groupedByGroupKey);
    // Step 4: Chunk the groups into batches of 100
    const groupBatches = chunkArray(groupedArrays, 100);
    // Step 5: Process each batch of 100 groups
    for (const batch of groupBatches) {
        for (const items of batch) {
            try {
                let encryptedTransactions = [];
                for (let i = 0; i < items.length; i++) {
                    console.info('Sending', items[i]);
                    const res = await client.send((0, Entities_1.GetEntities)({
                        pk: items[i].pk?.replace(/#ITEM#\w+/, '') ?? '',
                        dateRange: {
                            hasNoTimeConstraint: true,
                        },
                        username: '',
                        id: '',
                        entityName: 'SECURITY',
                        getAllSecuritiesForUser: true,
                    }));
                    encryptedTransactions.push(...(res?.Items ?? []));
                }
                const decrypedSecurities = await (0, Security_1.mapSecuritiesToJoinedData)(await (0, Encryption_1.decryptItemsInBatches)(encryptedTransactions ?? []));
                const encryptedAccounts = await Promise.all(items.flatMap(async (item) => await client.send((0, Entities_1.GetEntities)({
                    pk: item.pk ?? '',
                    dateRange: {
                        hasNoTimeConstraint: true,
                    },
                    username: '',
                    id: '',
                    entityName: 'ACCOUNT',
                }))));
                const decrypedAccounts = encryptedAccounts.flatMap((el) => el.Items?.map(Accounts_1.mapDynamoDBToAccount) ?? []);
                const netWorth = (0, exports.reduceAccounts)(decrypedAccounts);
                const securitySnapshot = Object.values(decrypedSecurities);
                const securityNetWorth = (0, exports.getNetWorth)(securitySnapshot);
                const tfsaNetWorth = (0, exports.reduceAccounts)(decrypedAccounts.filter((acc) => checkAccountNameOrTypes(['tfsa'], acc)));
                const rrspNetWorth = (0, exports.reduceAccounts)(decrypedAccounts.filter((acc) => checkAccountNameOrTypes(['rrsp', 'drsp'], acc)));
                const fhsaNetWorth = (0, exports.reduceAccounts)(decrypedAccounts.filter((acc) => checkAccountNameOrTypes(['fhsa'], acc)));
                const accountsToBalances = {};
                decrypedAccounts.forEach((acc) => {
                    accountsToBalances[acc.account_id] = { N: (0, exports.reduceAccounts)([acc]).toFixed(2) };
                });
                const command = new client_dynamodb_1.PutItemCommand({
                    TableName: process.env.TABLE_NAME,
                    Item: {
                        pk: {
                            S: items[0]?.groupKey
                                ? items[0]?.groupKey + '#NETWORTHDAILYSNAPSHOT'
                                : '',
                        },
                        sk: { S: new Date().toISOString() },
                        netWorth: { N: netWorth.toFixed(2) },
                        tfsaNetWorth: { N: tfsaNetWorth.toFixed(2) },
                        rrspNetWorth: { N: rrspNetWorth.toFixed(2) },
                        fhsaNetWorth: { N: fhsaNetWorth.toFixed(2) },
                        securityNetWorth: { N: securityNetWorth.toFixed(2) },
                        securities: { S: JSON.stringify(securitySnapshot) },
                        balances: { S: JSON.stringify(accountsToBalances) },
                    },
                });
                await client.send(command);
            }
            catch (e) {
                console.error(e);
                return undefined;
            }
        }
    }
}
const checkAccountNameOrTypes = (types, acc) => {
    return types
        .map((type) => {
        return acc.name?.toLowerCase()?.includes(type) || acc.type?.toLowerCase().includes(type);
    })
        .includes(true);
};
const getAccountBalanceMultipler = (acc) => (acc.type === 'loan' || acc.type === 'credit' ? -1 : 1);
exports.getAccountBalanceMultipler = getAccountBalanceMultipler;
const reduceAccounts = (accs) => accs.reduce((val, acc) => val + (0, exports.getAccountBalanceMultipler)(acc) * parseFloat(acc.balances?.current || '0'), 0);
exports.reduceAccounts = reduceAccounts;
const getNetWorth = (holdings) => {
    return holdings.reduce((val, holding) => {
        return val + (holding.holding.quantity ?? 0) * (holding.security?.close_price ?? 0);
    }, 0);
};
exports.getNetWorth = getNetWorth;
//# sourceMappingURL=data:application/json;base64,