type Account {
    account_id: ID!
    type: String
    name: String
    subtype: String
    balances: Balances
    mask: String
}

type Balances {
    current: String
    iso_currency_code: String
    available: String
    limit: String
}

type Chat {
    pk: String @aws_iam @aws_cognito_user_pools
    sk: String @aws_iam @aws_cognito_user_pools
    message: String @aws_iam @aws_cognito_user_pools
    time: String @aws_iam @aws_cognito_user_pools
    isLastChunk: Boolean @aws_iam @aws_cognito_user_pools
    messageId: String @aws_iam @aws_cognito_user_pools
}

enum ChatFocus {
    All
    Investment
    Transaction
    Accounts
    Tax
}

input ChatInput {
    pk: String
    sk: String
    message: String
    time: String
    isLastChunk: Boolean
    messageId: String
}

enum CacheType {
    StockNews
    StockAnalysis
    InvestmentAnalysis
    PortfolioAnalysis
}

input CacheIdentifer {
    key: String
    cacheType: CacheType
}
input ChatQuery {
    prompt: String
    chatFocus: ChatFocus
    accountId: String
    requiresLiveData: Boolean
    chatType: ChatType
    shouldRagFetch: Boolean
    cacheIdentifiers: [CacheIdentifer!]
}

enum ChatType {
    Regular
    FinancialNewsQuery
    FinancialAnalysisQuery
}

type ChatResponse {
    response: String
}

type GraphType {
    pieChart: String
    barChart: String
    histogram: String
    timePlot: String
}

type Holding {
    account_id: ID
    cost_basis: Float
    institution_price: Float
    institution_price_as_of: String
    institution_price_datetime: String
    institution_value: Float
    iso_currency_code: String
    quantity: Float
    security_id: String
    unofficial_currency_code: String
    plaid_type: String
}

union Investment = Holding | Security

type Item {
    item_id: ID!
    institution_id: ID!
    institution_name: String!
    sk: String
    created_at: String
    pk: String
}

type PaginatedInvestments {
    cursor: String
    transactions: [Investment!]!
}

type PaginatedItems {
    cursor: String
    items: [Item!]!
}

type PaginatedTransactions {
    cursor: String
    transactions: [Transaction!]!
}

type PremiumChatResponse {
    response: String
    graphs: GraphType
}

type Recommendation {
    explanation: String
    action: RecommendationAction
    title: String
    priority: String
}

type RecommendationAction {
    transfers: [Transfer]
    description: String
}

type Security {
    close_price: Float
    account_id: ID
    close_price_as_of: String
    cost_basis: Float
    cusip: String
    institution_id: String
    institution_security_id: String
    is_cash_equivalent: Boolean
    isin: String
    iso_currency_code: String
    name: String
    proxy_security_id: String
    security_id: String
    sedol: String
    ticker_symbol: String
    type: String
    unofficial_currency_code: String
    update_datetime: String
    market_identifier_code: String
    sector: String
    industry: String
    option_contract: String
    plaid_type: String
}

enum HighLevelTransactionCategory {
    INCOME
    TRANSFER_IN
    TRANSFER_OUT
    LOAN_PAYMENTS
    BANK_FEES
    ENTERTAINMENT
    FOOD_AND_DRINK
    GENERAL_MERCHANDISE
    HOME_IMPROVEMENT
    MEDICAL
    PERSONAL_CARE
    GENERAL_SERVICES
    GOVERNMENT_AND_NON_PROFIT
    TRANSPORTATION
    TRAVEL
    RENT_AND_UTILITIES
}

type PersonalFinanceCategory {
    detailed: String
    confidence_level: String
    primary: HighLevelTransactionCategory
}

type Transaction {
    transaction_id: ID!
    account_id: ID
    amount: String
    name: String
    iso_currency_code: String
    date: String
    payment_channel: String
    transaction_type: String
    personal_finance_category: PersonalFinanceCategory
}

type SpendingSummary {
    sk: String! # Date in string format (e.g., "YYYY-MM-DD")
    spending: AWSJSON
}

type Transfer {
    fromAccountName: String
    toAccountName: String
    amount: String
}

type Mutation {
    createChat(chat: ChatInput!): Chat @aws_iam
}

enum SpendingSummaryType {
    MONTHLYSUMMARY
    DAILYSUMMARY
}

type Query {
    getItems(limit: Int, cursor: String): PaginatedItems!
    getAccounts(id: ID!): [Account!]!
    getTransactions(id: ID!, limit: Int, cursor: String): PaginatedTransactions!
    getInvestments(id: ID!, limit: Int, cursor: String): PaginatedInvestments!
    getFinancialRecommendations(chat: ChatQuery): [Recommendation]!
    getFinancialConversationResponse(chat: ChatQuery): ChatResponse!
    getSpendingSummary(minDate: String, maxDate: String, id: String!, type: SpendingSummaryType): SpendingSummary!
}

type Subscription {
    onCreateChat(pk: String!): Chat @aws_subscribe(mutations: ["createChat"]) @aws_iam @aws_cognito_user_pools
}

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}
